-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Scalar exposing (Codecs, Id(..), Timestamp(..), Uuid(..), Void(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Id
    = Id String


type Timestamp
    = Timestamp String


type Uuid
    = Uuid String


type Void
    = Void String


defineCodecs :
    { codecId : Codec valueId
    , codecTimestamp : Codec valueTimestamp
    , codecUuid : Codec valueUuid
    , codecVoid : Codec valueVoid
    }
    -> Codecs valueId valueTimestamp valueUuid valueVoid
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueId valueTimestamp valueUuid valueVoid
    ->
        { codecId : Codec valueId
        , codecTimestamp : Codec valueTimestamp
        , codecUuid : Codec valueUuid
        , codecVoid : Codec valueVoid
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueId valueTimestamp valueUuid valueVoid -> Codec getterValue)
    -> Codecs valueId valueTimestamp valueUuid valueVoid
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueId valueTimestamp valueUuid valueVoid
    = Codecs (RawCodecs valueId valueTimestamp valueUuid valueVoid)


type alias RawCodecs valueId valueTimestamp valueUuid valueVoid =
    { codecId : Codec valueId
    , codecTimestamp : Codec valueTimestamp
    , codecUuid : Codec valueUuid
    , codecVoid : Codec valueVoid
    }


defaultCodecs : RawCodecs Id Timestamp Uuid Void
defaultCodecs =
    { codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    , codecTimestamp =
        { encoder = \(Timestamp raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Timestamp
        }
    , codecUuid =
        { encoder = \(Uuid raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Uuid
        }
    , codecVoid =
        { encoder = \(Void raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Void
        }
    }
