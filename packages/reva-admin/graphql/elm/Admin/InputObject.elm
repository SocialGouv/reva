-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.InputObject exposing (..)

import Admin.Enum.Duration
import Admin.Interface
import Admin.Object
import Admin.Scalar
import Admin.ScalarCodecs
import Admin.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildCandidacyInput :
    CandidacyInputRequiredFields
    -> CandidacyInput
buildCandidacyInput required____ =
    { deviceId = required____.deviceId, certificationId = required____.certificationId }


type alias CandidacyInputRequiredFields =
    { deviceId : Admin.ScalarCodecs.Id
    , certificationId : Admin.ScalarCodecs.Id
    }


{-| Type for the CandidacyInput input object.
-}
type alias CandidacyInput =
    { deviceId : Admin.ScalarCodecs.Id
    , certificationId : Admin.ScalarCodecs.Id
    }


{-| Encode a CandidacyInput into a value that can be used as an argument.
-}
encodeCandidacyInput : CandidacyInput -> Value
encodeCandidacyInput input____ =
    Encode.maybeObject
        [ ( "deviceId", (Admin.ScalarCodecs.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.deviceId |> Just ), ( "certificationId", (Admin.ScalarCodecs.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.certificationId |> Just ) ]


buildCandidateGoalInput :
    CandidateGoalInputRequiredFields
    -> (CandidateGoalInputOptionalFields -> CandidateGoalInputOptionalFields)
    -> CandidateGoalInput
buildCandidateGoalInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { additionalInformation = Absent }
    in
    { goalId = required____.goalId, additionalInformation = optionals____.additionalInformation }


type alias CandidateGoalInputRequiredFields =
    { goalId : Admin.ScalarCodecs.Id }


type alias CandidateGoalInputOptionalFields =
    { additionalInformation : OptionalArgument String }


{-| Type for the CandidateGoalInput input object.
-}
type alias CandidateGoalInput =
    { goalId : Admin.ScalarCodecs.Id
    , additionalInformation : OptionalArgument String
    }


{-| Encode a CandidateGoalInput into a value that can be used as an argument.
-}
encodeCandidateGoalInput : CandidateGoalInput -> Value
encodeCandidateGoalInput input____ =
    Encode.maybeObject
        [ ( "goalId", (Admin.ScalarCodecs.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.goalId |> Just ), ( "additionalInformation", Encode.string |> Encode.optional input____.additionalInformation ) ]


buildCertificationChangeInput :
    CertificationChangeInputRequiredFields
    -> CertificationChangeInput
buildCertificationChangeInput required____ =
    { candidacyId = required____.candidacyId, certificationId = required____.certificationId }


type alias CertificationChangeInputRequiredFields =
    { candidacyId : Admin.ScalarCodecs.Id
    , certificationId : Admin.ScalarCodecs.Id
    }


{-| Type for the CertificationChangeInput input object.
-}
type alias CertificationChangeInput =
    { candidacyId : Admin.ScalarCodecs.Id
    , certificationId : Admin.ScalarCodecs.Id
    }


{-| Encode a CertificationChangeInput into a value that can be used as an argument.
-}
encodeCertificationChangeInput : CertificationChangeInput -> Value
encodeCertificationChangeInput input____ =
    Encode.maybeObject
        [ ( "candidacyId", (Admin.ScalarCodecs.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.candidacyId |> Just ), ( "certificationId", (Admin.ScalarCodecs.codecs |> Admin.Scalar.unwrapEncoder .codecId) input____.certificationId |> Just ) ]


buildExperienceInput :
    ExperienceInputRequiredFields
    -> ExperienceInput
buildExperienceInput required____ =
    { title = required____.title, startedAt = required____.startedAt, duration = required____.duration, description = required____.description }


type alias ExperienceInputRequiredFields =
    { title : String
    , startedAt : Admin.ScalarCodecs.Date
    , duration : Admin.Enum.Duration.Duration
    , description : String
    }


{-| Type for the ExperienceInput input object.
-}
type alias ExperienceInput =
    { title : String
    , startedAt : Admin.ScalarCodecs.Date
    , duration : Admin.Enum.Duration.Duration
    , description : String
    }


{-| Encode a ExperienceInput into a value that can be used as an argument.
-}
encodeExperienceInput : ExperienceInput -> Value
encodeExperienceInput input____ =
    Encode.maybeObject
        [ ( "title", Encode.string input____.title |> Just ), ( "startedAt", (Admin.ScalarCodecs.codecs |> Admin.Scalar.unwrapEncoder .codecDate) input____.startedAt |> Just ), ( "duration", Encode.enum Admin.Enum.Duration.toString input____.duration |> Just ), ( "description", Encode.string input____.description |> Just ) ]
