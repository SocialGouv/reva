-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.Duration exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Duration
    = Unknown
    | LessThanOneYear
    | BetweenOneAndThreeYears
    | MoreThanThreeYears
    | MoreThanFiveYears
    | MoreThanTenYears


list : List Duration
list =
    [ Unknown, LessThanOneYear, BetweenOneAndThreeYears, MoreThanThreeYears, MoreThanFiveYears, MoreThanTenYears ]


decoder : Decoder Duration
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "unknown" ->
                        Decode.succeed Unknown

                    "lessThanOneYear" ->
                        Decode.succeed LessThanOneYear

                    "betweenOneAndThreeYears" ->
                        Decode.succeed BetweenOneAndThreeYears

                    "moreThanThreeYears" ->
                        Decode.succeed MoreThanThreeYears

                    "moreThanFiveYears" ->
                        Decode.succeed MoreThanFiveYears

                    "moreThanTenYears" ->
                        Decode.succeed MoreThanTenYears

                    _ ->
                        Decode.fail ("Invalid Duration type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Duration -> String
toString enum____ =
    case enum____ of
        Unknown ->
            "unknown"

        LessThanOneYear ->
            "lessThanOneYear"

        BetweenOneAndThreeYears ->
            "betweenOneAndThreeYears"

        MoreThanThreeYears ->
            "moreThanThreeYears"

        MoreThanFiveYears ->
            "moreThanFiveYears"

        MoreThanTenYears ->
            "moreThanTenYears"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Duration
fromString enumString____ =
    case enumString____ of
        "unknown" ->
            Just Unknown

        "lessThanOneYear" ->
            Just LessThanOneYear

        "betweenOneAndThreeYears" ->
            Just BetweenOneAndThreeYears

        "moreThanThreeYears" ->
            Just MoreThanThreeYears

        "moreThanFiveYears" ->
            Just MoreThanFiveYears

        "moreThanTenYears" ->
            Just MoreThanTenYears

        _ ->
            Nothing
