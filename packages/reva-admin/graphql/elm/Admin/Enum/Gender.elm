-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.Gender exposing (..)

import Json.Decode as Decode exposing (Decoder)


type Gender
    = Man
    | Undisclosed
    | Woman


list : List Gender
list =
    [ Man, Undisclosed, Woman ]


decoder : Decoder Gender
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "man" ->
                        Decode.succeed Man

                    "undisclosed" ->
                        Decode.succeed Undisclosed

                    "woman" ->
                        Decode.succeed Woman

                    _ ->
                        Decode.fail ("Invalid Gender type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : Gender -> String
toString enum____ =
    case enum____ of
        Man ->
            "man"

        Undisclosed ->
            "undisclosed"

        Woman ->
            "woman"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe Gender
fromString enumString____ =
    case enumString____ of
        "man" ->
            Just Man

        "undisclosed" ->
            Just Undisclosed

        "woman" ->
            Just Woman

        _ ->
            Nothing
