-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.CandidateTypology exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CandidateTypology
    = NonSpecifie
    | SalariePrive
    | SalariePublic
    | SalariePublicHospitalier
    | SalarieAlternant
    | SalarieInterimaire
    | SalarieIntermittent
    | SalarieEnContratsAides
    | TravailleurNonSalarie
    | ConjointCollaborateur
    | DemandeurEmploi
    | AidantsFamiliaux
    | Benevole
    | Stagiaire
    | Autre


list : List CandidateTypology
list =
    [ NonSpecifie, SalariePrive, SalariePublic, SalariePublicHospitalier, SalarieAlternant, SalarieInterimaire, SalarieIntermittent, SalarieEnContratsAides, TravailleurNonSalarie, ConjointCollaborateur, DemandeurEmploi, AidantsFamiliaux, Benevole, Stagiaire, Autre ]


decoder : Decoder CandidateTypology
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NON_SPECIFIE" ->
                        Decode.succeed NonSpecifie

                    "SALARIE_PRIVE" ->
                        Decode.succeed SalariePrive

                    "SALARIE_PUBLIC" ->
                        Decode.succeed SalariePublic

                    "SALARIE_PUBLIC_HOSPITALIER" ->
                        Decode.succeed SalariePublicHospitalier

                    "SALARIE_ALTERNANT" ->
                        Decode.succeed SalarieAlternant

                    "SALARIE_INTERIMAIRE" ->
                        Decode.succeed SalarieInterimaire

                    "SALARIE_INTERMITTENT" ->
                        Decode.succeed SalarieIntermittent

                    "SALARIE_EN_CONTRATS_AIDES" ->
                        Decode.succeed SalarieEnContratsAides

                    "TRAVAILLEUR_NON_SALARIE" ->
                        Decode.succeed TravailleurNonSalarie

                    "CONJOINT_COLLABORATEUR" ->
                        Decode.succeed ConjointCollaborateur

                    "DEMANDEUR_EMPLOI" ->
                        Decode.succeed DemandeurEmploi

                    "AIDANTS_FAMILIAUX" ->
                        Decode.succeed AidantsFamiliaux

                    "BENEVOLE" ->
                        Decode.succeed Benevole

                    "STAGIAIRE" ->
                        Decode.succeed Stagiaire

                    "AUTRE" ->
                        Decode.succeed Autre

                    _ ->
                        Decode.fail ("Invalid CandidateTypology type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CandidateTypology -> String
toString enum____ =
    case enum____ of
        NonSpecifie ->
            "NON_SPECIFIE"

        SalariePrive ->
            "SALARIE_PRIVE"

        SalariePublic ->
            "SALARIE_PUBLIC"

        SalariePublicHospitalier ->
            "SALARIE_PUBLIC_HOSPITALIER"

        SalarieAlternant ->
            "SALARIE_ALTERNANT"

        SalarieInterimaire ->
            "SALARIE_INTERIMAIRE"

        SalarieIntermittent ->
            "SALARIE_INTERMITTENT"

        SalarieEnContratsAides ->
            "SALARIE_EN_CONTRATS_AIDES"

        TravailleurNonSalarie ->
            "TRAVAILLEUR_NON_SALARIE"

        ConjointCollaborateur ->
            "CONJOINT_COLLABORATEUR"

        DemandeurEmploi ->
            "DEMANDEUR_EMPLOI"

        AidantsFamiliaux ->
            "AIDANTS_FAMILIAUX"

        Benevole ->
            "BENEVOLE"

        Stagiaire ->
            "STAGIAIRE"

        Autre ->
            "AUTRE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CandidateTypology
fromString enumString____ =
    case enumString____ of
        "NON_SPECIFIE" ->
            Just NonSpecifie

        "SALARIE_PRIVE" ->
            Just SalariePrive

        "SALARIE_PUBLIC" ->
            Just SalariePublic

        "SALARIE_PUBLIC_HOSPITALIER" ->
            Just SalariePublicHospitalier

        "SALARIE_ALTERNANT" ->
            Just SalarieAlternant

        "SALARIE_INTERIMAIRE" ->
            Just SalarieInterimaire

        "SALARIE_INTERMITTENT" ->
            Just SalarieIntermittent

        "SALARIE_EN_CONTRATS_AIDES" ->
            Just SalarieEnContratsAides

        "TRAVAILLEUR_NON_SALARIE" ->
            Just TravailleurNonSalarie

        "CONJOINT_COLLABORATEUR" ->
            Just ConjointCollaborateur

        "DEMANDEUR_EMPLOI" ->
            Just DemandeurEmploi

        "AIDANTS_FAMILIAUX" ->
            Just AidantsFamiliaux

        "BENEVOLE" ->
            Just Benevole

        "STAGIAIRE" ->
            Just Stagiaire

        "AUTRE" ->
            Just Autre

        _ ->
            Nothing
