-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Enum.CandidateTypology exposing (..)

import Json.Decode as Decode exposing (Decoder)


type CandidateTypology
    = NonSpecifie
    | SalariePrive
    | SalariePublicHospitalier
    | DemandeurEmploi
    | AidantsFamiliaux
    | Autre


list : List CandidateTypology
list =
    [ NonSpecifie, SalariePrive, SalariePublicHospitalier, DemandeurEmploi, AidantsFamiliaux, Autre ]


decoder : Decoder CandidateTypology
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "NON_SPECIFIE" ->
                        Decode.succeed NonSpecifie

                    "SALARIE_PRIVE" ->
                        Decode.succeed SalariePrive

                    "SALARIE_PUBLIC_HOSPITALIER" ->
                        Decode.succeed SalariePublicHospitalier

                    "DEMANDEUR_EMPLOI" ->
                        Decode.succeed DemandeurEmploi

                    "AIDANTS_FAMILIAUX" ->
                        Decode.succeed AidantsFamiliaux

                    "AUTRE" ->
                        Decode.succeed Autre

                    _ ->
                        Decode.fail ("Invalid CandidateTypology type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : CandidateTypology -> String
toString enum____ =
    case enum____ of
        NonSpecifie ->
            "NON_SPECIFIE"

        SalariePrive ->
            "SALARIE_PRIVE"

        SalariePublicHospitalier ->
            "SALARIE_PUBLIC_HOSPITALIER"

        DemandeurEmploi ->
            "DEMANDEUR_EMPLOI"

        AidantsFamiliaux ->
            "AIDANTS_FAMILIAUX"

        Autre ->
            "AUTRE"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe CandidateTypology
fromString enumString____ =
    case enumString____ of
        "NON_SPECIFIE" ->
            Just NonSpecifie

        "SALARIE_PRIVE" ->
            Just SalariePrive

        "SALARIE_PUBLIC_HOSPITALIER" ->
            Just SalariePublicHospitalier

        "DEMANDEUR_EMPLOI" ->
            Just DemandeurEmploi

        "AIDANTS_FAMILIAUX" ->
            Just AidantsFamiliaux

        "AUTRE" ->
            Just Autre

        _ ->
            Nothing
