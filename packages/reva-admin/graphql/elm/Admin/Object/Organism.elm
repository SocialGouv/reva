-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Admin.Object.Organism exposing (..)

import Admin.Enum.OrganismTypology
import Admin.InputObject
import Admin.Interface
import Admin.Object
import Admin.Scalar
import Admin.Union
import Data.Scalar
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


id : SelectionSet Data.Scalar.Uuid Admin.Object.Organism
id =
    Object.selectionForField "Data.Scalar.Uuid" "id" [] (Data.Scalar.codecs |> Admin.Scalar.unwrapCodecs |> .codecUuid |> .decoder)


label : SelectionSet String Admin.Object.Organism
label =
    Object.selectionForField "String" "label" [] Decode.string


address : SelectionSet String Admin.Object.Organism
address =
    Object.selectionForField "String" "address" [] Decode.string


zip : SelectionSet String Admin.Object.Organism
zip =
    Object.selectionForField "String" "zip" [] Decode.string


city : SelectionSet String Admin.Object.Organism
city =
    Object.selectionForField "String" "city" [] Decode.string


contactAdministrativeEmail : SelectionSet String Admin.Object.Organism
contactAdministrativeEmail =
    Object.selectionForField "String" "contactAdministrativeEmail" [] Decode.string


contactAdministrativePhone : SelectionSet (Maybe String) Admin.Object.Organism
contactAdministrativePhone =
    Object.selectionForField "(Maybe String)" "contactAdministrativePhone" [] (Decode.string |> Decode.nullable)


website : SelectionSet (Maybe String) Admin.Object.Organism
website =
    Object.selectionForField "(Maybe String)" "website" [] (Decode.string |> Decode.nullable)


typology : SelectionSet Admin.Enum.OrganismTypology.OrganismTypology Admin.Object.Organism
typology =
    Object.selectionForField "Enum.OrganismTypology.OrganismTypology" "typology" [] Admin.Enum.OrganismTypology.decoder


type alias OrganismOnDepartmentsOptionalArguments =
    { departmentId : OptionalArgument Data.Scalar.Uuid }


organismOnDepartments :
    (OrganismOnDepartmentsOptionalArguments -> OrganismOnDepartmentsOptionalArguments)
    -> SelectionSet decodesTo Admin.Object.OrganismOnDepartment
    -> SelectionSet (List decodesTo) Admin.Object.Organism
organismOnDepartments fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { departmentId = Absent }

        optionalArgs____ =
            [ Argument.optional "departmentId" filledInOptionals____.departmentId (Data.Scalar.codecs |> Admin.Scalar.unwrapEncoder .codecUuid) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "organismOnDepartments" optionalArgs____ object____ (Basics.identity >> Decode.list)
