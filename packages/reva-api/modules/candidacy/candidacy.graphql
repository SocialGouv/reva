enum Duration {
  unknown
  lessThanOneYear
  betweenOneAndThreeYears
  moreThanThreeYears
  moreThanFiveYears
  moreThanTenYears
}

enum CandidateTypology {
  NON_SPECIFIE
  SALARIE_PRIVE
  SALARIE_PUBLIC
  SALARIE_PUBLIC_HOSPITALIER
  SALARIE_ALTERNANT
  SALARIE_INTERIMAIRE
  SALARIE_INTERMITTENT
  SALARIE_EN_CONTRATS_AIDES
  TRAVAILLEUR_NON_SALARIE
  CONJOINT_COLLABORATEUR
  DEMANDEUR_EMPLOI
  AIDANTS_FAMILIAUX
  BENEVOLE
  STAGIAIRE
  AUTRE
}

enum CandidacyStatusStep {
  ARCHIVE
  PROJET
  VALIDATION
  PRISE_EN_CHARGE
  PARCOURS_ENVOYE
  PARCOURS_CONFIRME
  DOSSIER_FAISABILITE_ENVOYE
  DOSSIER_FAISABILITE_RECEVABLE
  DOSSIER_FAISABILITE_INCOMPLET
  DOSSIER_FAISABILITE_NON_RECEVABLE
  DEMANDE_FINANCEMENT_ENVOYE
  DEMANDE_PAIEMENT_ENVOYEE
  DOSSIER_PRO
  CERTIFICATION
}

enum FinanceModule {
  unireva
  unifvae
}

# QUERY

type Candidacy {
  id: ID!
  deviceId: ID
  candidate: Candidate
  certificationId: ID
  regionId: ID
  region: Region
  department: Department
  organismId: UUID
  organism: Organism
  certification: Certification
  isCertificationPartial: Boolean!
  experiences: [Experience!]!
  goals: [CandidateGoal!]!
  firstname: String
  lastname: String
  phone: String
  email: String
  typology: CandidateTypology
  typologyAdditional: String
  firstAppointmentOccuredAt: Timestamp
  appointmentCount: Int
  candidacyStatuses: [CandidacyStatus!]!
  certificateSkills: String
  otherTraining: String
  individualHourCount: Int
  collectiveHourCount: Int
  additionalHourCount: Int
  basicSkillIds: [UUID!]!
  basicSkills: [BasicSkill!]!
  mandatoryTrainingIds: [UUID!]!
  mandatoryTrainings: [Training!]!
  candidacyDropOut: CandidacyDropOut
  createdAt: Timestamp!
  admissibility: Admissibility!
  reorientationReason: ReorientationReason
  examInfo: ExamInfo!
  financeModule: FinanceModule!
}

type CandidacyDropOut {
  dropOutReason: DropOutReason!
  droppedOutAt: Timestamp!
  otherReasonContent: String
  status: CandidacyStatusStep!
}

type CandidacySummary {
  id: ID!
  deviceId: ID!
  certificationId: ID
  certification: CertificationSummary
  organismId: ID
  organism: Organism
  department: Department
  firstname: String
  lastname: String
  phone: String
  email: String
  isDroppedOut: Boolean!
  isReorientation: Boolean!
  lastStatus: CandidacyStatus!
  createdAt: Timestamp!
  sentAt: Timestamp
}

type CandidacySummaryFilterInfo {
  active: Int!
  projet: Int!
  archive: Int!
  reorientation: Int!
  abandon: Int!
  validation: Int!
  priseEnCharge: Int!
  parcoursEnvoye: Int!
  parcoursConfirme: Int!
  demandeFinancementEnvoye: Int!
  demandePaiementEnvoyee: Int!
}

type CertificationSummary {
  id: ID!
  label: String!
}

type CandidacyStatus {
  id: ID!
  status: CandidacyStatusStep!
  isActive: Boolean!
  createdAt: Timestamp!
}

type Experience {
  id: ID!
  title: String!
  startedAt: Timestamp!
  duration: Duration!
  description: String!
}

type CandidateGoal {
  goalId: ID!
  additionalInformation: String
}

enum OrganismTypology {
  experimentation
  generaliste
  expertFiliere
  expertBranche
  expertBrancheEtFiliere
}

type Training {
  id: ID!
  label: String!
}

type BasicSkill {
  id: UUID!
  label: String!
}

type Admissibility {
  isCandidateAlreadyAdmissible: Boolean!
  reportSentAt: Timestamp
  certifierRespondedAt: Timestamp
  responseAvailableToCandidateAt: Timestamp
  status: AdmissibilityStatus
}

enum AdmissibilityStatus {
  ADMISSIBLE
  NOT_ADMISSIBLE
}

type ExamInfo {
  examResult: ExamResult
  estimatedExamDate: Timestamp
  actualExamDate: Timestamp
}

enum ExamResult {
  SUCCESS
  PARTIAL_SUCCESS
  PARTIAL_CERTIFICATION_SUCCESS
  FAILURE
}

type CandidacyCountByStatus {
  ACTIVE_HORS_ABANDON: Int!
  ABANDON: Int!
  REORIENTEE: Int!
  ARCHIVE_HORS_ABANDON_HORS_REORIENTATION: Int!
  PARCOURS_CONFIRME_HORS_ABANDON: Int!
  PRISE_EN_CHARGE_HORS_ABANDON: Int!
  PARCOURS_ENVOYE_HORS_ABANDON: Int!
  DOSSIER_FAISABILITE_ENVOYE_HORS_ABANDON: Int!
  DOSSIER_FAISABILITE_RECEVABLE_HORS_ABANDON: Int!
  DOSSIER_FAISABILITE_INCOMPLET_HORS_ABANDON: Int!
  DOSSIER_FAISABILITE_NON_RECEVABLE_HORS_ABANDON: Int!
  DEMANDE_FINANCEMENT_ENVOYE_HORS_ABANDON: Int!
  DEMANDE_PAIEMENT_ENVOYEE_HORS_ABANDON: Int!
  VALIDATION_HORS_ABANDON: Int!
  PROJET_HORS_ABANDON: Int!
}

type CandidacySummaryPage {
  rows: [CandidacySummary!]!
  info: PaginationInfo!
}

enum CandidacyStatusFilter {
  ACTIVE_HORS_ABANDON
  ABANDON
  REORIENTEE
  ARCHIVE_HORS_ABANDON_HORS_REORIENTATION
  PARCOURS_CONFIRME_HORS_ABANDON
  PRISE_EN_CHARGE_HORS_ABANDON
  PARCOURS_ENVOYE_HORS_ABANDON
  DOSSIER_FAISABILITE_ENVOYE_HORS_ABANDON
  DOSSIER_FAISABILITE_RECEVABLE_HORS_ABANDON
  DOSSIER_FAISABILITE_INCOMPLET_HORS_ABANDON
  DOSSIER_FAISABILITE_NON_RECEVABLE_HORS_ABANDON
  DEMANDE_FINANCEMENT_ENVOYE_HORS_ABANDON
  DEMANDE_PAIEMENT_ENVOYEE_HORS_ABANDON
  VALIDATION_HORS_ABANDON
  PROJET_HORS_ABANDON
}

type Query {
  getCandidacyById(id: ID!): Candidacy
  getCandidacies(
    offset: Int
    limit: Int
    statusFilter: CandidacyStatusFilter
    searchFilter: String
  ): CandidacySummaryPage!
  getTrainings: [Training!]!
  getOrganismsForCandidacy(candidacyId: UUID!): [Organism!]!
  getRandomOrganismsForCandidacy(
    candidacyId: UUID!
    searchText: String
  ): [Organism!]!
  getCompanionsForCandidacy(candidacyId: UUID!): [Organism!]!
  getBasicSkills: [BasicSkill!]!
  candidacy_candidacyCountByStatus: CandidacyCountByStatus!
}

# MUTATIONS

input CandidacyInput {
  deviceId: ID!
  certificationId: ID!
  regionId: ID!
}

input CertificationChangeInput {
  candidacyId: ID!
  certificationId: ID!
}

input ExperienceInput {
  title: String!
  startedAt: Timestamp!
  duration: Duration!
  description: String!
}

input CandidateGoalInput {
  goalId: ID!
  additionalInformation: String
}

input CandidateTypologyInformationsInput {
  typology: CandidateTypology!
  additionalInformation: String
}

input AppointmentInformationsInput {
  firstAppointmentOccuredAt: Timestamp
  appointmentCount: Int!
}

input TrainingInput {
  certificateSkills: String!
  otherTraining: String!
  individualHourCount: Int!
  collectiveHourCount: Int!
  additionalHourCount: Int!
  basicSkillIds: [UUID!]!
  mandatoryTrainingIds: [UUID!]!
  isCertificationPartial: Boolean!
}

input DropOutInput {
  droppedOutAt: Timestamp!
  dropOutReasonId: UUID!
  otherReasonContent: String
}

input AdmissibilityInput {
  isCandidateAlreadyAdmissible: Boolean!
  reportSentAt: Timestamp
  certifierRespondedAt: Timestamp
  responseAvailableToCandidateAt: Timestamp
  status: AdmissibilityStatus
}

input ExamInfoInput {
  examResult: ExamResult
  estimatedExamDate: Timestamp
  actualExamDate: Timestamp
}

type Mutation {
  candidacy_submitCandidacy(deviceId: ID!, candidacyId: ID!): Candidacy
  candidacy_updateCertification(
    deviceId: ID!
    candidacyId: ID!
    certificationId: ID!
    departmentId: ID!
  ): Candidacy
  candidacy_addExperience(
    deviceId: ID!
    candidacyId: ID!
    experience: ExperienceInput
  ): Experience
  candidacy_updateExperience(
    deviceId: ID!
    candidacyId: ID!
    experienceId: ID!
    experience: ExperienceInput
  ): Experience
  candidacy_removeExperience(
    deviceId: ID!
    candidacyId: ID!
    experienceId: ID!
  ): Void
  candidacy_updateGoals(
    deviceId: ID!
    candidacyId: ID!
    goals: [CandidateGoalInput!]!
  ): Int!
  candidacy_updateContact(
    deviceId: ID!
    candidacyId: ID!
    email: String
    phone: String
  ): Candidacy
  candidacy_archiveById(
    candidacyId: ID!
    reorientationReasonId: UUID
  ): Candidacy!
  candidacy_unarchiveById(candidacyId: ID!): Candidacy!
  candidacy_deleteById(candidacyId: ID!): String!
  candidacy_updateAppointmentInformations(
    candidacyId: ID!
    candidateTypologyInformations: CandidateTypologyInformationsInput!
    appointmentInformations: AppointmentInformationsInput!
  ): Candidacy!
  candidacy_takeOver(candidacyId: ID!): Candidacy!
  candidacy_selectOrganism(candidacyId: UUID!, organismId: UUID!): Candidacy!
  candidacy_submitTrainingForm(
    candidacyId: UUID!
    training: TrainingInput!
  ): Candidacy!
  candidacy_confirmTrainingForm(candidacyId: UUID!): Candidacy!
  candidacy_dropOut(candidacyId: UUID!, dropOut: DropOutInput!): Candidacy!
  candidacy_cancelDropOutById(candidacyId: UUID!): Candidacy!
  candidacy_updateAdmissibility(
    candidacyId: UUID!
    admissibility: AdmissibilityInput!
  ): Admissibility!
  candidacy_updateExamInfo(
    candidacyId: UUID!
    examInfo: ExamInfoInput!
  ): ExamInfo!
}
