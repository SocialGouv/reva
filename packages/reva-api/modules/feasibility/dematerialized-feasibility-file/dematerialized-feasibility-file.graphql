type DematerializedFeasibilityFile {
  id: ID!
  firstForeignLanguage: String
  secondForeignLanguage: String
  option: String
  blocsDeCompetences(
    blocDeCompetencesId: ID
  ): [DFFCertificationCompetenceBloc!]!
  certificationPartComplete: Boolean!
  attachmentsPartComplete: Boolean!
  competenceBlocsPartCompletion: CompetenceBlocsPartCompletion!
  certificationCompetenceDetails: [CertificationCompetenceDetails!]!
  prerequisitesPartComplete: Boolean!
  prerequisites: [Prerequisite]!
  dffAndCertificationPrerequisites: [PrerequisiteFromDffAndCertification]!
  aapDecision: DFFileAapDecision
  aapDecisionComment: String
  candidateDecisionComment: String
  attachments: [DFFAttachment]!
  sentToCandidateAt: Timestamp
  swornStatementFileId: ID
  swornStatementFile: File
  isReadyToBeSentToCandidate: Boolean!
  isReadyToBeSentToCertificationAuthority: Boolean!
  candidateConfirmationAt: Timestamp
  eligibilityRequirement: DFFEligibilityRequirement
  eligibilityValidUntil: Timestamp
  dffFile: File
}

enum DFFEligibilityRequirement {
  FULL_ELIGIBILITY_REQUIREMENT
  PARTIAL_ELIGIBILITY_REQUIREMENT
}

enum DFFCertificationCompetenceDetailsState {
  YES
  NO
  PARTIALLY
}

type DFFCertificationCompetenceBloc {
  complete: Boolean!
  certificationCompetenceBloc: CertificationCompetenceBloc!
  text: String
}

type Prerequisite {
  id: ID!
  label: String!
  state: PrerequisiteState!
}
type PrerequisiteFromDffAndCertification {
  id: ID
  label: String!
  state: PrerequisiteState
  certificationPrerequisiteId: String
}

input PrerequisiteInput {
  id: ID
  label: String!
  state: PrerequisiteState!
  certificationPrerequisiteId: String
}

enum CompetenceBlocsPartCompletion {
  TO_COMPLETE
  COMPLETED
  IN_PROGRESS
}

enum PrerequisiteState {
  ACQUIRED
  IN_PROGRESS
  RECOMMENDED
}
type CertificationCompetenceDetails {
  certificationCompetence: CertificationCompetence!
  text: String
  state: DFFCertificationCompetenceDetailsState!
}

type DFFAttachment {
  id: ID!
  file: File!
  type: DFFAttachmentType!
  createdAt: Timestamp!
}

enum CertificationCompletion {
  COMPLETE
  PARTIAL
}
enum DFFAttachmentType {
  ID_CARD
  EQUIVALENCE_OR_EXEMPTION_PROOF
  TRAINING_CERTIFICATE
  ADDITIONAL
}

input DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput {
  firstForeignLanguage: String
  secondForeignLanguage: String
  option: String
  blocDeCompetencesIds: [String!]!
  completion: CertificationCompletion!
}

input DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput {
  dematerializedFeasibilityFileId: ID!
  competenceBloc: CertificationCompetenceBlocInput!
  competenceDetails: [competenceDetails!]!
}

input DematerializedFeasibilityFileCreateOrUpdatePrerequisitesInput {
  prerequisites: [PrerequisiteInput]!
}

input DematerializedFeasibilityFileCreateOrUpdateAapDecisionInput {
  aapDecision: DFFileAapDecision!
  aapDecisionComment: String!
}

input DematerializedFeasibilityFileCreateOrUpdateCertificationAuthorityDecisionInput {
  decision: DFFileCertificationAuthorityDecision!
  decisionComment: String
  decisionFile: Upload
}

input DematerializedFeasibilityFileCreateOrUpdateCandidateDecisionInput {
  candidateDecisionComment: String
}

enum DFFileAapDecision {
  FAVORABLE
  UNFAVORABLE
}

enum DFFileCertificationAuthorityDecision {
  ADMISSIBLE
  COMPLETE
  INCOMPLETE
  REJECTED
}

input CertificationCompetenceBlocInput {
  id: ID!
  text: String!
}

input competenceDetails {
  competenceId: ID!
  state: DFFCertificationCompetenceDetailsState!
}

input DematerializedFeasibilityFileCreateOrUpdateAttachmentsInput {
  idCard: Upload!
  equivalenceOrExemptionProof: Upload
  trainingCertificate: Upload
  additionalFiles: [Upload]
}

input DematerializedFeasibilityFileCreateOrUpdateSwornStatementInput {
  swornStatement: Upload!
}

input DematerializedFeasibilityFileCreateOrUpdateEligibilityRequirementInput {
  eligibilityRequirement: DFFEligibilityRequirement!
  eligibilityValidUntil: Timestamp
}

type Mutation {
  dematerialized_feasibility_file_createOrUpdateCertificationInfo(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateCertificationInfoInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateCertificationCompetenceDetails(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateCertificationCompetenceDetailsInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdatePrerequisites(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdatePrerequisitesInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateAapDecision(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateAapDecisionInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateAttachments(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateAttachmentsInput!
  ): String!

  dematerialized_feasibility_file_sendToCandidate(
    candidacyId: ID!
    dematerializedFeasibilityFileId: ID!
  ): String!

  dematerialized_feasibility_file_sendToCertificationAuthority(
    candidacyId: ID!
    dematerializedFeasibilityFileId: ID!
    certificationAuthorityId: ID!
  ): String!

  dematerialized_feasibility_file_createOrUpdateSwornStatement(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateSwornStatementInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateCertificationAuthorityDecision(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateCertificationAuthorityDecisionInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_confirmCandidate(
    candidacyId: ID!
    dematerializedFeasibilityFileId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateCandidateDecisionInput!
  ): DematerializedFeasibilityFile!

  dematerialized_feasibility_file_createOrUpdateEligibilityRequirement(
    candidacyId: ID!
    input: DematerializedFeasibilityFileCreateOrUpdateEligibilityRequirementInput!
  ): DematerializedFeasibilityFile!
}
