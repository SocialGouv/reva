type ExamInfo {
  examResult: ExamResult
  estimatedExamDate: Timestamp
  actualExamDate: Timestamp
}

enum JuryResult {
  FULL_SUCCESS_OF_FULL_CERTIFICATION
  FULL_SUCCESS_OF_PARTIAL_CERTIFICATION
  PARTIAL_SUCCESS_OF_FULL_CERTIFICATION
  PARTIAL_SUCCESS_OF_PARTIAL_CERTIFICATION
  PARTIAL_SUCCESS_PENDING_CONFIRMATION
  FAILURE
  CANDIDATE_EXCUSED
  CANDIDATE_ABSENT
}

input JuryInfoInput {
  result: JuryResult!
  informationOfResult: String
}

type Jury {
  id: ID!
  candidacy: Candidacy!
  dateOfSession: Timestamp!
  timeOfSession: String
  timeSpecified: Boolean
  addressOfSession: String
  informationOfSession: String
  convocationFile: File
  result: JuryResult
  dateOfResult: Timestamp
  informationOfResult: String
  isResultTemporary: Boolean
}

type Candidacy {
  examInfo: ExamInfo!
  jury: Jury
  historyJury: [Jury!]!
}

enum ExamResult {
  SUCCESS
  PARTIAL_SUCCESS
  PARTIAL_CERTIFICATION_SUCCESS
  FAILURE
}

input ExamInfoInput {
  examResult: ExamResult
  estimatedExamDate: Timestamp
  actualExamDate: Timestamp
}

enum JuryCategoryFilter {
  ALL
  SCHEDULED
  PASSED
}

type JuryPage {
  rows: [Jury!]!
  info: PaginationInfo!
}

type JuryCountByCategory {
  SCHEDULED: Int!
  PASSED: Int!
}

type Query {
  jury_getJuries(
    offset: Int
    limit: Int
    categoryFilter: JuryCategoryFilter
    searchFilter: String
    certificationAuthorityId: ID
    certificationAuthorityLocalAccountId: ID
  ): JuryPage!
  jury_juryCountByCategory(
    searchFilter: String
    certificationAuthorityId: ID
    certificationAuthorityLocalAccountId: ID
  ): JuryCountByCategory!
}

type Mutation {
  jury_updateExamInfo(candidacyId: UUID!, examInfo: ExamInfoInput!): ExamInfo!
  jury_updateResult(juryId: ID!, input: JuryInfoInput!): Jury!
  jury_revokeDecision(juryId: ID!, reason: String): Jury!
}
