enum Gender {
  man
  undisclosed
  woman
}

type Tokens {
  accessToken: String!
  refreshToken: String!
  idToken: String!
}

type CandidateLogged {
  tokens: Tokens!
  candidate: Candidate!
}

type TrainingForm {
  individualHourCount: Int!
  certificateSkills: String!
  collectiveHourCount: Int!
  basicSkills: [BasicSkill!]!
  mandatoryTrainings: [Training!]!
  otherTraining: String!
}

type Candidate {
  id: UUID!
  gender: Gender
  firstname: String!
  firstname2: String
  firstname3: String
  lastname: String!
  givenName: String
  email: String!
  phone: String!
  birthCity: String
  birthDepartment: Department
  birthdate: Date
  country: Country
  nationality: String
  candidacy: Candidacy!
  candidacies: [Candidacy!]!
  highestDegree: Degree
  highestDegreeLabel: String
  niveauDeFormationLePlusEleve: Degree
  department: Department!
  zip: String
  street: String
  city: String
  addressComplement: String
}

type Query {
  candidate_getCandidateWithCandidacy: Candidate!
}

input CandidateInput {
  email: String!
  phone: String!
  firstname: String!
  lastname: String!
  departmentId: String!
  certificationId: String
  typeAccompagnement: TypeAccompagnement!
  cohorteVaeCollectiveId: String
}

input CandidateUpdateInformationInput {
  id: UUID!
  gender: Gender!
  lastname: String!
  givenName: String
  firstname: String!
  firstname2: String
  firstname3: String
  birthdate: Date!
  birthCity: String!
  birthDepartmentId: String
  countryId: UUID!
  nationality: String!
  street: String!
  zip: String!
  city: String!
  phone: String!
  email: String!
  addressComplement: String
}

input CandidateUpdateInformationBySelfInput {
  id: UUID!
  email: String!
  lastname: String!
  firstname: String!
  phone: String!
  gender: Gender
  givenName: String
  firstname2: String
  firstname3: String
  birthdate: Date
  birthCity: String
  birthDepartmentId: String
  countryId: UUID
  nationality: String
  street: String
  zip: String
  city: String
  addressComplement: String
}

input CandidateProfileUpdateInput {
  candidateId: UUID!
  highestDegreeId: UUID!
  highestDegreeLabel: String
  niveauDeFormationLePlusEleveDegreeId: String
}

input CandidateUpdateContactDetailsInput {
  phone: String!
  email: String
}

type Mutation {
  candidate_askForRegistration(candidate: CandidateInput!): String!
  candidate_askForLogin(email: String!): String!
  candidate_loginWithToken(token: String!): String!
  candidate_loginWithCredentials(
    email: String!
    password: String!
  ): CandidateLogged!
  candidate_forgotPassword(email: String!): Boolean!
  candidate_resetPassword(token: String!, password: String!): Boolean!
  candidate_updateCandidateInformation(
    candidacyId: String!
    candidateInformation: CandidateUpdateInformationInput!
  ): Candidate
  candidate_updateCandidateProfile(
    candidacyId: String!
    candidateProfile: CandidateProfileUpdateInput!
  ): Candidate
  candidate_updateCandidateInformationBySelf(
    candidateId: String!
    candidateInformation: CandidateUpdateInformationBySelfInput!
  ): Candidate
  candidate_updateCandidateContactDetails(
    candidacyId: String!
    candidateId: String!
    candidateContactDetails: CandidateUpdateContactDetailsInput!
  ): Candidate!
}
