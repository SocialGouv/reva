type SubDomain {
  id: ID!
  code: ID!
  label: String!
}

type Domain {
  id: ID!
  code: ID!
  label: String!
  children: [SubDomain!]!
}

enum CertificationJuryTypeOfModality {
  PRESENTIEL
  A_DISTANCE
  LES_DEUX
}

enum CertificationJuryFrequency {
  MONTHLY
  TRIMESTERLY
  YEARLY
}

type Certification {
  id: ID!
  label: String!
  summary: String
  level: Int!
  activities: String
  activityArea: String
  accessibleJobType: String
  abilities: String
  codeRncp: String!
  status: CertificationStatus!
  visible: Boolean!
  typeDiplome: String
  degree: Degree!
  conventionsCollectives: [ConventionCollective!]!
  availableAt: Timestamp!
  expiresAt: Timestamp!
  competenceBlocs: [CertificationCompetenceBloc!]!
  rncpExpiresAt: Timestamp
  rncpPublishedAt: Timestamp
  rncpEffectiveAt: Timestamp
  rncpDeliveryDeadline: Timestamp
  rncpObjectifsContexte: String
  domains: [Domain!]!
  fcPrerequisites: String
  prerequisites: [CertificationPrerequisite!]!
  juryTypeMiseEnSituationProfessionnelle: CertificationJuryTypeOfModality
  juryTypeSoutenanceOrale: CertificationJuryTypeOfModality
  juryFrequency: CertificationJuryFrequency
  juryFrequencyOther: String
  juryPlace: String
  additionalInfo: CertificationAdditionalInfo
  isAapAvailable: Boolean!
  juryEstimatedCost: Decimal
}

type CertificationAdditionalInfo {
  id: ID!
  linkToReferential: String!
  linkToCorrespondenceTable: String
  dossierDeValidationTemplate: File
  dossierDeValidationLink: String
  linkToJuryGuide: String
  certificationExpertContactDetails: String
  certificationExpertContactPhone: String
  certificationExpertContactEmail: String
  usefulResources: String
  commentsForAAP: String
  additionalDocuments: [File!]!
}

type CertificationPrerequisite {
  id: ID!
  label: String!
  index: Int!
}

type Referential {
  goals: [Goal!]!
}

type Goal {
  id: ID!
  label: String!
  order: Int!
  needsAdditionalInformation: Boolean!
  isActive: Boolean!
}

type Region {
  id: ID!
  code: String!
  label: String!
  departments: [Department!]!
}

type Department {
  id: ID!
  code: String!
  label: String!
  region: Region
  timezone: String!
}

type Degree {
  id: ID!
  code: String!
  label: String!
  longLabel: String!
  level: Int!
}

type VulnerabilityIndicator {
  id: ID!
  label: String!
}

type DropOutReason {
  id: ID!
  label: String!
  isActive: Boolean!
}

type ReorientationReason {
  id: ID!
  label: String!
  disabled: Boolean!
}

type ConventionCollective {
  id: ID!
  code: String!
  label: String!
}

enum CertificationStatus {
  BROUILLON
  A_VALIDER_PAR_CERTIFICATEUR
  VALIDE_PAR_CERTIFICATEUR
  INACTIVE
}

enum FinanceModule {
  unireva
  unifvae
  hors_plateforme
}

type CertificationCompetenceBloc {
  id: ID!
  code: String
  label: String!
  text: String
  FCCompetences: String
  competences: [CertificationCompetence!]!
  certification: Certification!
}

type CertificationCompetence {
  id: ID!
  label: String!
}

type CertificationPage {
  rows: [Certification!]!
  info: PaginationInfo!
}

type BlocCompetence {
  CODE: String!
  LIBELLE: String!
  LISTE_COMPETENCES: String!
  PARSED_COMPETENCES: [String!]!
  MODALITES_EVALUATION: String
}

type FCFormacode {
  CODE: String!
  LIBELLE: String!
}

type FCAbrege {
  CODE: String!
  LIBELLE: String!
}

type FCNomenclatureEurope {
  NIVEAU: String!
  INTITULE: String!
}

type FCCertification {
  ID_FICHE: ID!
  NUMERO_FICHE: String!
  INTITULE: String!
  ABREGE: FCAbrege
  NOMENCLATURE_EUROPE: FCNomenclatureEurope
  DATE_FIN_ENREGISTREMENT: Timestamp
  DATE_LIMITE_DELIVRANCE: Timestamp
  DATE_EFFET: Timestamp
  DATE_DE_PUBLICATION: Timestamp
  BLOCS_COMPETENCES: [BlocCompetence!]!
  FORMACODES: [FCFormacode!]!
  DOMAINS: [Domain!]!
  OBJECTIFS_CONTEXTE: String
}

type Country {
  id: UUID!
  label: String!
  isoCode: String!
}

enum LegalStatus {
  EI
  EURL
  SARL
  SAS
  SASU
  SA
  EIRL
  ASSOCIATION_LOI_1901
  ETABLISSEMENT_PUBLIC
  FONDATION
  AUTRE
  NC
}

enum PersonneType {
  PERSONNE_PHYSIQUE
  PERSONNE_MORALE
}

type FormeJuridique {
  code: ID!
  libelle: String!
  legalStatus: LegalStatus!
}

type MandataireSocial {
  type: PersonneType!
  nom: String!
  fonction: String
}

type Kbis {
  mandatairesSociaux: [MandataireSocial!]!
  formeJuridique: String!
}

type EtablissementDiffusible {
  siret: ID!
  siegeSocial: Boolean!
  dateFermeture: Timestamp
  raisonSociale: String!
  formeJuridique: FormeJuridique!
  qualiopiStatus: Boolean
}

type Etablissement {
  siret: ID!
  siegeSocial: Boolean!
  dateFermeture: Timestamp
  raisonSociale: String!
  formeJuridique: FormeJuridique!
  kbis: Kbis
  qualiopiStatus: Boolean
}

enum FormacodeType {
  MAIN_DOMAIN
  DOMAIN
  SUB_DOMAIN
  SEMANTIC_FIELD
  KEYWORD
}

type Formacode {
  id: ID!
  type: FormacodeType!
  code: ID!
  label: String!
  parentCode: ID
}

type CandidacyFinancingMethod {
  id: ID!
  label: String!
  aapDescription: String
}
input ActiveCertificationsFiltersInput {
  domaines: [String!]
  branches: [String!]
  levels: [Int!]
}

type Query {
  getReferential: Referential!
  searchCertificationsForCandidate(
    offset: Int
    limit: Int
    organismId: UUID
    searchText: String
    candidacyId: ID
  ): CertificationPage!
  searchCertificationsForAdmin(
    offset: Int
    limit: Int
    searchText: String
    status: CertificationStatus
    visible: Boolean
  ): CertificationPage!
  searchCertificationsV2ForRegistryManager(
    offset: Int
    limit: Int
    searchText: String
    status: CertificationStatus
    visible: Boolean
  ): CertificationPage!
  getCertification(certificationId: ID!): Certification!
  getRegions: [Region!]!
  getDepartments(elligibleVAE: Boolean): [Department!]!
  getDegrees: [Degree!]!
  getVulnerabilityIndicators: [VulnerabilityIndicator!]!
  getDropOutReasons: [DropOutReason!]!
  getReorientationReasons: [ReorientationReason!]!
  getConventionCollectives: [ConventionCollective!]!
  getFCCertification(rncp: ID!): FCCertification
  getCountries: [Country!]!
  getEtablissement(siret: ID!): EtablissementDiffusible
  getEtablissementAsAdmin(siret: ID!): Etablissement
  getFormacodes: [Formacode!]!
  getActiveCertifications(
    filters: ActiveCertificationsFiltersInput
  ): [Certification!]!
  getCandidacyFinancingMethods: [CandidacyFinancingMethod!]!
  getCertificationCompetenceBloc(
    certificationCompetenceBlocId: ID!
  ): CertificationCompetenceBloc!
}

input AddCertificationInput {
  codeRncp: String!
}

input ReplaceCertificationInput {
  codeRncp: String!
  certificationId: ID!
}

input CompetenceInput {
  id: ID
  index: Int!
  label: String!
}

input CompetenceBlocInput {
  id: ID
  code: String
  label: String!
  FCCompetences: String
  competences: [CompetenceInput!]!
}

input UpdateCompetenceBlocsInput {
  certificationId: ID!
  blocs: [CompetenceBlocInput!]!
}

input UpdateCompetenceBlocInput {
  certificationId: ID!
  id: ID!
  label: String!
  competences: [CompetenceInput!]!
}

input CreateCompetenceBlocInput {
  certificationId: ID!
  label: String!
  competences: [CompetenceInput!]!
}

input UpdateCertificationStructureAndCertificationAuthoritiesInput {
  certificationId: ID!
  certificationAuthorityStructureId: String!
  certificationAuthorityIds: [String!]!
}

input SendCertificationToRegistryManagerInput {
  certificationId: ID!
}

input ResetCompetenceBlocsByCertificationIdInput {
  certificationId: ID!
}

input UpdateCertificationPrerequisitesInput {
  certificationId: ID!
  prerequisites: [CertificationPrerequisiteInput!]!
}

input CertificationPrerequisiteInput {
  label: String!
  index: Int!
}

input UpdateCertificationDescriptionInput {
  certificationId: ID!
  juryTypeMiseEnSituationProfessionnelle: CertificationJuryTypeOfModality
  juryTypeSoutenanceOrale: CertificationJuryTypeOfModality
  juryFrequency: CertificationJuryFrequency
  juryFrequencyOther: String
  juryPlace: String
  juryEstimatedCost: Decimal
  availableAt: Timestamp
  expiresAt: Timestamp
}

input ValidateCertificationInput {
  certificationId: ID!
}

input CertificationAdditionalInfoInput {
  linkToReferential: String!
  linkToCorrespondenceTable: String
  dossierDeValidationTemplate: Upload
  dossierDeValidationLink: String
  linkToJuryGuide: String
  certificationExpertContactDetails: String
  certificationExpertContactPhone: String
  certificationExpertContactEmail: String
  usefulResources: String
  commentsForAAP: String
  additionalDocuments: [Upload!]
}

input UpdateCertificationAdditionalInfoInput {
  certificationId: ID!
  additionalInfo: CertificationAdditionalInfoInput!
}

type Mutation {
  referential_updateCompetenceBlocsByCertificationId(
    input: UpdateCompetenceBlocsInput!
  ): [CertificationCompetenceBloc!]!
  referential_createCertificationCompetenceBloc(
    input: CreateCompetenceBlocInput!
  ): CertificationCompetenceBloc
  referential_updateCertificationCompetenceBloc(
    input: UpdateCompetenceBlocInput!
  ): CertificationCompetenceBloc
  referential_deleteCertificationCompetenceBloc(
    certificationId: ID!
    certificationCompetenceBlocId: ID!
  ): CertificationCompetenceBloc!
  referential_addCertification(input: AddCertificationInput!): Certification!
  referential_replaceCertification(
    input: ReplaceCertificationInput!
  ): Certification!
  referential_updateCertificationStructureAndCertificationAuthorities(
    input: UpdateCertificationStructureAndCertificationAuthoritiesInput
  ): Certification!
  referential_sendCertificationToRegistryManager(
    input: SendCertificationToRegistryManagerInput
  ): Certification!
  referential_resetCompetenceBlocsByCertificationId(
    input: ResetCompetenceBlocsByCertificationIdInput
  ): Certification!
  referential_updateCertificationPrerequisites(
    input: UpdateCertificationPrerequisitesInput
  ): Certification!
  referential_updateCertificationDescription(
    input: UpdateCertificationDescriptionInput
  ): Certification!
  referential_validateCertification(
    input: ValidateCertificationInput
  ): Certification!
  referential_updateCertificationAdditionalInfo(
    input: UpdateCertificationAdditionalInfoInput
  ): CertificationAdditionalInfo!
}
