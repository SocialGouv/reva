generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CertificationStatus {
  BROUILLON
  A_VALIDER_PAR_CERTIFICATEUR
  VALIDE_PAR_CERTIFICATEUR
  INACTIVE
}

enum ExperienceDuration {
  unknown
  lessThanOneYear
  betweenOneAndThreeYears
  moreThanThreeYears
  moreThanFiveYears
  moreThanTenYears
}

enum FeasibilityFormat {
  UPLOADED_PDF
  DEMATERIALIZED
}

enum CertificationJuryModality {
  PRESENTIEL
  A_DISTANCE
  MISE_EN_SITUATION_PROFESSIONNELLE
  ORAL
}

enum CertificationJuryTypeOfModality {
  PRESENTIEL
  A_DISTANCE
  LES_DEUX
}

enum CertificationJuryFrequency {
  MONTHLY
  TRIMESTERLY
  YEARLY
}

model Certification {
  id                                                String                                              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                             String                                              @db.VarChar(255)
  level                                             Int
  activities                                        String?
  activityArea                                      String?                                             @map("activity_area")
  accessibleJobType                                 String?                                             @map("accessible_job_type")
  abilities                                         String?
  summary                                           String?
  status                                            CertificationStatus                                 @default(BROUILLON) @map("status")
  visible                                           Boolean                                             @default(false)
  rncpId                                            String                                              @map("rncp_id") @db.VarChar(255)
  organismsAndRegions                               OrganismsOnRegionsAndCertifications[]
  createdAt                                         DateTime                                            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                         DateTime?                                           @map("updated_at") @db.Timestamptz(6)
  certificationOnConventionCollective               CertificationOnConventionCollective[]
  certificationAuthorityOnCertification             CertificationAuthorityOnCertification[]
  searchable_text                                   Unsupported("tsvector")?                            @default(dbgenerated("to_tsvector('simple'::regconfig, immutable_unaccent((((COALESCE(label, ''::character varying))::text || ' '::text) || ((COALESCE(rncp_id, ''::character varying))::text || ' '::text))))"))
  certificationAuthorityLocalAccountOnCertification CertificationAuthorityLocalAccountOnCertification[]
  availableAt                                       DateTime                                            @map("available_at") @db.Timestamptz(6)
  expiresAt                                         DateTime                                            @map("expires_at") @db.Timestamptz(6)
  juryModalities                                    CertificationJuryModality[]                         @default([]) @map("jury_modalities")
  juryTypeMiseEnSituationProfessionnelle            CertificationJuryTypeOfModality?                    @map("jury_type_mise_en_situation_professionnelle")
  juryTypeSoutenanceOrale                           CertificationJuryTypeOfModality?                    @map("jury_type_soutenance_orale")
  juryFrequency                                     CertificationJuryFrequency?                         @map("jury_frequency")
  juryFrequencyOther                                String?                                             @map("jury_frequency_other")
  juryPlace                                         String?                                             @map("jury_place")
  juryEstimatedCost                                 Decimal?                                            @map("jury_estimated_cost") @db.Decimal(10, 2)
  previousVersionCertificationId                    String?                                             @unique @map("previous_version_certification_id") @db.Uuid
  previousVersion                                   Certification?                                      @relation("replacement", fields: [previousVersionCertificationId], references: [id])
  nextVersion                                       Certification?                                      @relation("replacement")
  competenceBlocs                                   CertificationCompetenceBloc[]
  feasibilityFormat                                 FeasibilityFormat                                   @default(UPLOADED_PDF) @map("feasibility_format")
  certificationAuthorityStructure                   CertificationAuthorityStructure?                    @relation(fields: [certificationAuthorityStructureId], references: [id])
  certificationAuthorityStructureId                 String?                                             @map("certification_authority_structure_id") @db.Uuid
  Candidacy                                         Candidacy[]

  rncpLabel             String?   @map("rncp_label") @db.VarChar(255)
  rncpLevel             Int?      @map("rncp_level")
  rncpTypeDiplome       String?   @map("rncp_type_diplome") @db.VarChar(255)
  rncpExpiresAt         DateTime? @map("rncp_expires_at") @db.Timestamptz(6)
  rncpPublishedAt       DateTime? @map("rncp_published_at") @db.Timestamptz(6)
  rncpEffectiveAt       DateTime? @map("rncp_effective_at") @db.Timestamptz(6)
  rncpDeliveryDeadline  DateTime? @map("rncp_delivery_deadline") @db.Timestamptz(6)
  rncpObjectifsContexte String?   @map("rncp_objectifs_contexte") @db.Text

  certificationOnFormacode CertificationOnFormacode[]

  AvailableCertificationBasedOnFormacode                 AvailableCertificationBasedOnFormacode?
  ActiveOrganismByAvailableCertificationBasedOnFormacode ActiveOrganismByAvailableCertificationBasedOnFormacode[]
  prerequisites                                          CertificationPrerequisite[]
  fcPrerequisites                                        String?                                                  @map("fc_prerequisites") @db.VarChar
  additionalInfo                                         CertificationAdditionalInfo?
  certificationStatusHistory                             CertificationStatusHistory[]
  CertificationCohorteVaeCollective                      CertificationCohorteVaeCollective[]
  certificationEmails                                    CertificationEmail[]

  @@map("certification")
}

model CertificationStatusHistory {
  id              String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationId String              @map("certification_id") @db.Uuid
  certification   Certification       @relation(fields: [certificationId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  status          CertificationStatus @map("status")
  createdAt       DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("certification_status_history")
}

model CertificationCompetenceBloc {
  id                             String                           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt                      DateTime                         @default(now()) @map("created_at") @db.Timestamptz(6)
  code                           String?                          @unique @db.VarChar(255)
  label                          String                           @db.VarChar
  //
  certificationId                String                           @map("certification_id") @db.Uuid
  certification                  Certification                    @relation(fields: [certificationId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  //
  FCCompetences                  String?                          @map("fc_competences") @db.VarChar
  competences                    CertificationCompetence[]
  dffCertificationCompetenceBloc DFFCertificationCompetenceBloc[]

  @@map("certification_competence_bloc")
}

model CertificationCompetence {
  id                                String                              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt                         DateTime                            @default(now()) @map("created_at") @db.Timestamptz(6)
  label                             String                              @db.VarChar
  index                             Int?                                @db.Integer
  blocId                            String                              @map("bloc_id") @db.Uuid
  bloc                              CertificationCompetenceBloc         @relation(fields: [blocId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  dffCertificationCompetenceDetails DFFCertificationCompetenceDetails[]

  @@map("certification_competence")
}

model CertificationAdditionalInfo {
  id                                String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt                         DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  linkToReferential                 String        @map("link_to_referential")
  linkToCorrespondenceTable         String?       @map("link_to_corresponence_table")
  dossierDeValidationTemplateFileId String?       @map("dossier_de_validation_file_id") @db.Uuid
  dossierDeValidationTemplate       File?         @relation(fields: [dossierDeValidationTemplateFileId], references: [id], onUpdate: NoAction, onDelete: Cascade)
  dossierDeValidationLink           String?       @map("dossier_de_validation_link")
  linkToJuryGuide                   String?       @map("link_to_jury_guide")
  certificationExpertContactDetails String?       @map("certification_expert_contact_details")
  certificationExpertContactPhone   String?       @map("certification_expert_contact_phone") @db.VarChar(50)
  certificationExpertContactEmail   String?       @map("certification_expert_contact_email") @db.VarChar(255)
  usefulResources                   String?       @map("useful_resources")
  commentsForAAP                    String?       @map("comments_for_aap")
  certificationId                   String        @unique @map("certification_id") @db.Uuid
  certification                     Certification @relation(fields: [certificationId], references: [id], onUpdate: NoAction, onDelete: Cascade)

  @@map("certification_additional_info")
}

model CertificationEmail {
  id              String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationId String                 @map("certification_id") @db.Uuid
  certification   Certification          @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  emailType       CertificationEmailType @map("email_type")
  sentAt          DateTime               @default(now()) @map("sent_at") @db.Timestamptz(6)

  @@map("certification_email")
}

enum CertificationEmailType {
  CERTIFICATION_WILL_EXPIRE_IN_1_MONTH
  CERTIFICATION_HAS_EXPIRED
}

enum FinanceModule {
  unireva // XP: Uniformation / Reva
  unifvae // GIP: Uniformation / France VAE
  hors_plateforme // Financement hors plateforme
}

model Candidacy {
  id                                            String                                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organism                                      Organism?                                       @relation(fields: [organismId], references: [id])
  organismId                                    String?                                         @map("organism_id") @db.Uuid
  candidacyStatuses                             CandidaciesStatus[]
  goals                                         CandicadiesOnGoals[]
  experiences                                   Experience[]
  typology                                      CandidateTypology                               @default(NON_SPECIFIE)
  typologyAdditional                            String?                                         @map("typology_additional")
  ccn                                           CandidacyConventionCollective?                  @relation(fields: [ccnId], references: [id], onDelete: NoAction)
  ccnId                                         String?                                         @map("ccn_id") @db.Uuid
  firstAppointmentOccuredAt                     DateTime?                                       @map("first_appointment_occured_at") @db.Timestamptz(6)
  appointmentCount                              Int                                             @default(0) @map("appointment_count")
  trainings                                     TrainingOnCandidacies[]
  basicSkills                                   BasicSkillOnCandidacies[]
  certificateSkills                             String?                                         @map("certificate_skills")
  otherTraining                                 String?                                         @map("other_training")
  individualHourCount                           Int?                                            @map("individual_hour_count")
  collectiveHourCount                           Int?                                            @map("collective_hour_count")
  additionalHourCount                           Int?                                            @map("additional_hour_count")
  candidate                                     Candidate?                                      @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId                                   String?                                         @map("candidate_id") @db.Uuid
  candidacyDropOut                              CandidacyDropOut?                               @relation()
  reorientationReason                           ReorientationReason?                            @relation(fields: [reorientationReasonId], references: [id], onDelete: Cascade)
  reorientationReasonId                         String?                                         @map("reorientation_reason_id") @db.Uuid
  createdAt                                     DateTime                                        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                     DateTime?                                       @map("updated_at") @db.Timestamptz(6)
  sentAt                                        DateTime?                                       @map("sent_at") @db.Timestamptz(6)
  financeModule                                 FinanceModule                                   @default(hors_plateforme) @map("finance_module")
  FundingRequest                                FundingRequest?
  paymentRequest                                PaymentRequest?
  fundingRequestUnifvae                         FundingRequestUnifvae?
  isCertificationPartial                        Boolean?                                        @map("is_certification_partial")
  admissibility                                 Admissibility?
  examInfo                                      ExamInfo?
  readyForJuryEstimatedAt                       DateTime?                                       @map("ready_for_jury_estimated_at") @db.Timestamptz(6)
  Feasibility                                   Feasibility[]
  dossierDeValidation                           DossierDeValidation[]
  paymentRequestUnifvae                         PaymentRequestUnifvae?
  Jury                                          Jury[]
  CandidacyLog                                  CandidacyLog[]
  reminderToOrganismDVDeadlineExceededSentAt    DateTime?                                       @map("reminder_to_organism_dv_deadline_exceeded_sent_at") @db.Timestamptz(6)
  feasibilityFormat                             FeasibilityFormat                               @default(UPLOADED_PDF) @map("feasibility_format")
  certificationAuthorityTransferReason          String?                                         @map("certification_authority_transfer_reason")
  certification                                 Certification?                                  @relation(fields: [certificationId], references: [id], onDelete: Restrict)
  certificationId                               String?                                         @map("certification_id") @db.Uuid
  status                                        CandidacyStatusStep                             @default(PROJET)
  typeAccompagnement                            CandidacyTypeAccompagnement                     @default(ACCOMPAGNE) @map("type_accompagnement")
  candidacyOnCandidacyFinancingMethod           CandidacyOnCandidacyFinancingMethod[]
  lastActivityDate                              DateTime?                                       @map("last_activity_date") @db.Timestamptz(6)
  candidacyContestationCaducite                 CandidacyContestationCaducite[]
  CandidacyEmail                                CandidacyEmail[]
  cohorteVaeCollectiveId                        String?                                         @map("cohorte_vae_collective_id") @db.Uuid
  cohorteVaeCollective                          CohorteVaeCollective?                           @relation(fields: [cohorteVaeCollectiveId], references: [id], onDelete: NoAction)
  certificationAuthorityLocalAccountOnCandidacy CertificationAuthorityLocalAccountOnCandidacy[]
  feasibilityFileTemplateFirstReadAt            DateTime?                                       @map("feasibility_file_template_first_read_at") @db.Timestamptz(6)

  @@index([organismId])
  @@index([candidateId])
  @@index([certificationId])
  @@map("candidacy")
}

enum CandidacyTypeAccompagnement {
  AUTONOME
  ACCOMPAGNE
}

/// Candicadies statuses
model CandidaciesStatus {
  id          String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy   Candidacy           @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId String              @map("candidacy_id") @db.Uuid
  status      CandidacyStatusStep @default(PROJET)
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?           @map("updated_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@index([status])
  @@index([candidacyId, status])
  @@map("candidacy_candidacy_status")
}

enum CandidacyStatusStep {
  ARCHIVE
  PROJET
  VALIDATION
  PRISE_EN_CHARGE
  PARCOURS_ENVOYE
  PARCOURS_CONFIRME
  DOSSIER_FAISABILITE_ENVOYE
  DOSSIER_FAISABILITE_COMPLET
  DOSSIER_FAISABILITE_INCOMPLET
  DOSSIER_FAISABILITE_RECEVABLE
  DOSSIER_FAISABILITE_NON_RECEVABLE
  DOSSIER_DE_VALIDATION_ENVOYE
  DOSSIER_DE_VALIDATION_SIGNALE
  DEMANDE_FINANCEMENT_ENVOYE
  DEMANDE_PAIEMENT_ENVOYEE
  DOSSIER_PRO
  CERTIFICATION
}

enum Gender {
  man
  undisclosed
  woman
}

model Candidate {
  id                                   String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  keycloakId                           String                  @unique @map("keycloak_id") @db.Uuid
  gender                               Gender?
  email                                String                  @unique @db.VarChar(255)
  firstname                            String                  @db.VarChar(255)
  firstname2                           String?                 @db.VarChar(255)
  firstname3                           String?                 @db.VarChar(255)
  lastname                             String                  @db.VarChar(255)
  givenName                            String?                 @map("given_name") @db.VarChar(255)
  phone                                String                  @db.VarChar(255)
  street                               String?                 @db.VarChar(255)
  city                                 String?                 @db.VarChar(255)
  zip                                  String?                 @db.VarChar(5)
  addressComplement                    String?                 @db.VarChar(255)
  departmentId                         String                  @map("department_id") @db.Uuid
  department                           Department              @relation(fields: [departmentId], references: [id])
  birthDepartmentId                    String?                 @map("birth_department_id") @db.Uuid
  birthDepartment                      Department?             @relation("birthDepartmentCandidate", fields: [birthDepartmentId], references: [id])
  birthdate                            DateTime?               @map("birthdate") @db.Timestamptz(6)
  birthCity                            String?                 @map("birth_city") @db.VarChar(255)
  countryId                            String?                 @map("country_id") @db.Uuid
  country                              Country?                @relation(fields: [countryId], references: [id])
  nationality                          String?                 @db.VarChar(255)
  highestDegree                        Degree?                 @relation("highest_degree", fields: [highestDegreeId], references: [id])
  highestDegreeLabel                   String?                 @db.VarChar(255)
  niveauDeFormationLePlusEleveDegreeId String?                 @map("niveau_de_formation_le_plus_eleve_degree_id") @db.Uuid
  niveauDeFormationLePlusEleve         Degree?                 @relation("niveau_de_formation_le_plus_eleve", fields: [niveauDeFormationLePlusEleveDegreeId], references: [id])
  highestDegreeId                      String?                 @map("highest_degree_id") @db.Uuid
  vulnerabilityIndicator               VulnerabilityIndicator? @relation(fields: [vulnerabilityIndicatorId], references: [id])
  vulnerabilityIndicatorId             String?                 @map("vulnerability_indicator_id") @db.Uuid
  candidacies                          Candidacy[]
  createdAt                            DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                            DateTime?               @map("updated_at") @db.Timestamptz(6)
  passwordUpdatedAt                    DateTime?               @map("password_updated_at") @db.Timestamptz(6)
  lastLoginViaPasswordAt               DateTime?               @map("last_login_via_password_at") @db.Timestamptz(6)
  lastLoginViaMagicLinkAt              DateTime?               @map("last_login_via_magic_link_at") @db.Timestamptz(6)

  @@map("candidate")
}

model Goal {
  id                         String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                      String               @unique @db.VarChar(255)
  needsAdditionalInformation Boolean              @default(false) @map("needs_additional_information")
  isActive                   Boolean              @default(false) @map("is_active")
  candidacies                CandicadiesOnGoals[]
  order                      Int
  createdAt                  DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@map("goal")
}

model CandicadiesOnGoals {
  candidacy             Candidacy @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId           String    @map("candidacy_id") @db.Uuid
  goal                  Goal      @relation(fields: [goalId], references: [id])
  goalId                String    @map("goal_id") @db.Uuid
  additionalInformation String?   @map("additional_information")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime? @map("updated_at") @db.Timestamptz(6)

  @@id([candidacyId, goalId])
  @@map("candidacy_goal")
}

model Experience {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String
  duration    ExperienceDuration
  startedAt   DateTime
  candidacy   Candidacy          @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId String             @map("candidacy_id") @db.Uuid
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?          @map("updated_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@map("experience")
}

enum CandidateTypology {
  NON_SPECIFIE
  SALARIE_PRIVE
  SALARIE_PUBLIC
  SALARIE_PUBLIC_HOSPITALIER
  SALARIE_ALTERNANT
  SALARIE_INTERIMAIRE
  SALARIE_INTERMITTENT
  SALARIE_EN_CONTRATS_AIDES
  TRAVAILLEUR_NON_SALARIE
  CONJOINT_COLLABORATEUR
  DEMANDEUR_EMPLOI
  AIDANTS_FAMILIAUX
  AIDANTS_FAMILIAUX_AGRICOLES
  BENEVOLE
  STAGIAIRE
  TITULAIRE_MANDAT_ELECTIF
  RETRAITE
  AUTRE
}

model Region {
  id                         String                                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                      String                                @unique @db.VarChar(255)
  code                       String                                @unique @db.VarChar(3)
  organismsAndCertifications OrganismsOnRegionsAndCertifications[]
  departments                Department[]
  createdAt                  DateTime                              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime?                             @map("updated_at") @db.Timestamptz(6)

  @@map("region")
}

model Department {
  id                                             String                                           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                          String                                           @unique @db.VarChar(255)
  code                                           String                                           @unique @db.VarChar(5)
  region                                         Region?                                          @relation(fields: [regionId], references: [id], onDelete: NoAction)
  regionId                                       String?                                          @map("region_id") @db.Uuid
  createdAt                                      DateTime                                         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                      DateTime?                                        @map("updated_at") @db.Timestamptz(6)
  Candidate                                      Candidate[]
  certificationAuthorityOnDepartment             CertificationAuthorityOnDepartment[]
  certificationAuthorityLocalAccountOnDepartment CertificationAuthorityLocalAccountOnDepartment[]
  CandidateBirthDerpartment                      Candidate[]                                      @relation("birthDepartmentCandidate")
  elligibleVAE                                   Boolean                                          @map("elligible_vae")

  @@index([regionId])
  @@map("department")
}

model Country {
  id        String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label     String      @unique @db.VarChar(255)
  Candidate Candidate[]
  createdAt DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("country")
}

model Account {
  id                                 String                               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email                              String                               @unique @db.VarChar(255)
  firstname                          String?                              @db.VarChar(255)
  lastname                           String?                              @db.VarChar(255)
  organism                           Organism?                            @relation(fields: [organismId], references: [id])
  organismId                         String?                              @map("organism_id") @db.Uuid
  certificationAuthority             CertificationAuthority?              @relation(fields: [certificationAuthorityId], references: [id], onDelete: NoAction)
  certificationAuthorityId           String?                              @map("certification_authority_id") @db.Uuid
  keycloakId                         String                               @unique @map("keycloak_id") @db.Uuid
  AuditEvent                         AuditEvent[]
  maisonMereAAP                      MaisonMereAAP[]
  featureBetaTest                    FeatureBetaTest[]
  certificationAuthorityLocalAccount CertificationAuthorityLocalAccount[]
  certificationRegistryManager       CertificationRegistryManager[]
  disabledAt                         DateTime?                            @map("disabled_at") @db.Timestamptz(6)

  @@index([email])
  @@index([organismId])
  @@index([certificationAuthorityId])
  @@map("account")
}

model Organism {
  id                             String                                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                          String                                @db.VarChar(255)
  legalStatus                    LegalStatus                           @default(NC) @map("legal_status")
  llToEarth                      String?                               @map("ll_to_earth")
  contactAdministrativeEmail     String                                @map("contact_administrative_email") @db.VarChar(255)
  contactAdministrativePhone     String?                               @map("contact_administrative_phone") @db.VarChar(50)
  siret                          String
  candidacies                    Candidacy[]
  accounts                       Account[]
  regionsAndCertifications       OrganismsOnRegionsAndCertifications[]
  createdAt                      DateTime                              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                      DateTime?                             @map("updated_at") @db.Timestamptz(6)
  FundingRequest                 FundingRequest[]
  typology                       OrganismTypology                      @map("typology")
  organismOnConventionCollective OrganismOnConventionCollective[]
  qualiopiCertificateExpiresAt   DateTime?                             @map("qualiopi_certificate_expires_at")
  website                        String?                               @db.VarChar(255)

  nomPublic                          String?                       @map("nom_public")
  telephone                          String?
  siteInternet                       String?                       @map("site_internet") @db.VarChar(255)
  emailContact                       String?                       @map("email_contact") @db.VarChar(255)
  adresseNumeroEtNomDeRue            String?                       @map("adresse_numero_et_nom_de_rue") @db.VarChar(255)
  adresseInformationsComplementaires String?                       @map("adresse_informations_complementaires") @db.VarChar(255)
  adresseCodePostal                  String?                       @map("adresse_code_postal") @db.VarChar(255)
  adresseVille                       String?                       @map("adresse_ville") @db.VarChar(255)
  conformeNormesAccessibilite        ConformiteNormeAccessibilite? @map("conforme_norme_accessibilite")

  maisonMereAAP   MaisonMereAAP? @relation(fields: [maisonMereAAPId], references: [id], onDelete: NoAction)
  maisonMereAAPId String?        @map("maison_mere_aap_id") @db.Uuid

  fermePourAbsenceOuConges Boolean                @default(false) @map("ferme_pour_absence_ou_conges")
  managedDegrees           OrganismOnDegree[]
  OrganismOnRemoteZone     OrganismOnRemoteZone[]
  organismOnFormacode      OrganismOnFormacode[]

  ActiveOrganismByAvailableCertificationBasedOnFormacode ActiveOrganismByAvailableCertificationBasedOnFormacode[]

  modaliteAccompagnement                       OrganismModaliteAccompagnement                @map("modalite_accompagnement")
  modaliteAccompagnementRenseigneeEtValide     Boolean                                       @map("modalite_accompagnement_renseignee_et_valide")
  certificationCohorteVaeCollectiveOnOrganisms CertificationCohorteVaeCollectiveOnOrganism[]

  @@index([maisonMereAAPId])
  @@map("organism")
}

enum OrganismModaliteAccompagnement {
  A_DISTANCE
  LIEU_ACCUEIL
}

enum RemoteZone {
  FRANCE_METROPOLITAINE
  GUADELOUPE
  GUYANE
  MARTINIQUE
  MAYOTTE
  LA_REUNION
  SAINTE_LUCIE_SAINT_MARTIN
  SAINT_PIERRE_ET_MIQUELON
}

model OrganismOnRemoteZone {
  id         String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organism   Organism   @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId String     @map("organism_id") @db.Uuid
  remoteZone RemoteZone @map("remote_zone")

  @@unique([organismId, remoteZone])
  @@index([remoteZone])
  @@map("organism_on_remote_zone")
}

model OrganismOnDegree {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organism   Organism @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId String   @map("organism_id") @db.Uuid
  degree     Degree   @relation(fields: [degreeId], references: [id], onDelete: Cascade)
  degreeId   String   @map("degree_id") @db.Uuid

  @@unique([organismId, degreeId])
  @@map("organism_on_degree")
}

enum ConformiteNormeAccessibilite {
  CONFORME
  NON_CONFORME
  ETABLISSEMENT_NE_RECOIT_PAS_DE_PUBLIC
}

model OrganismsOnRegionsAndCertifications {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organism        Organism      @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId      String        @map("organism_id") @db.Uuid
  region          Region        @relation(fields: [regionId], references: [id])
  regionId        String        @map("region_id") @db.Uuid
  isArchitect     Boolean       @default(false) @map("is_architect")
  isCompanion     Boolean       @default(false) @map("is_companion")
  certification   Certification @relation(fields: [certificationId], references: [id])
  certificationId String        @map("certification_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamptz(6)

  @@unique([organismId, regionId, certificationId])
  @@map("organism_region_certification")
}

model Training {
  id                               String                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                            String                             @unique @db.VarChar(255)
  candidacies                      TrainingOnCandidacies[]
  createdAt                        DateTime                           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                        DateTime?                          @map("updated_at") @db.Timestamptz(6)
  trainingOnFundingRequests        TrainingOnFundingRequests[]
  trainingOnFundingRequestsUnifvae TrainingOnFundingRequestsUnifvae[]

  @@map("training")
}

model TrainingOnCandidacies {
  training    Training  @relation(fields: [trainingId], references: [id])
  trainingId  String    @map("training_id") @db.Uuid
  candidacy   Candidacy @relation(fields: [candidacyId], references: [id])
  candidacyId String    @map("candidacy_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)

  @@id([trainingId, candidacyId])
  @@map("training_candidacy")
}

model BasicSkill {
  id                                 String                               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                              String                               @unique @db.VarChar(255)
  candidacies                        BasicSkillOnCandidacies[]
  createdAt                          DateTime                             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                          DateTime?                            @map("updated_at") @db.Timestamptz(6)
  basicSkillOnFundingRequests        BasicSkillOnFundingRequests[]
  basicSkillOnFundingRequestsUnifvae BasicSkillOnFundingRequestsUnifvae[]

  @@map("basic_skill")
}

model BasicSkillOnCandidacies {
  basicSkill   BasicSkill @relation(fields: [basicSkillId], references: [id])
  basicSkillId String     @map("basic_skill_id") @db.Uuid
  candidacy    Candidacy  @relation(fields: [candidacyId], references: [id])
  candidacyId  String     @map("candidacy_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?  @map("updated_at") @db.Timestamptz(6)

  @@id([basicSkillId, candidacyId])
  @@map("basic_skill_candidacy")
}

model Degree {
  id                                         String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code                                       String             @unique @db.VarChar(255)
  label                                      String             @unique @db.VarChar(255)
  longLabel                                  String             @unique @map("long_label") @db.VarChar(255)
  level                                      Int
  candidatesWithHighestDegree                Candidate[]        @relation("highest_degree")
  createdAt                                  DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                  DateTime?          @map("updated_at") @db.Timestamptz(6)
  managingOrganisms                          OrganismOnDegree[]
  candidatesWithNiveauDeFormationLePlusEleve Candidate[]        @relation("niveau_de_formation_le_plus_eleve")

  @@map("degree")
}

model VulnerabilityIndicator {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label      String      @unique @db.VarChar(255)
  candidates Candidate[]
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("vulnerability_indicator")
}

model Feature {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key             String            @unique @db.VarChar(255)
  label           String            @db.VarChar(255)
  description     String?
  isActive        Boolean           @default(false) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @map("updated_at") @db.Timestamptz(6)
  featureBetaTest FeatureBetaTest[]

  @@map("features")
}

model BatchExecution {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key        String    @db.VarChar(255)
  startedAt  DateTime  @map("started_at") @db.Timestamptz(6)
  finishedAt DateTime? @map("finished_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamptz(6)

  @@map("batch_execution")
}

model FundingRequest {
  id                          String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                   Candidacy                     @relation(fields: [candidacyId], references: [id])
  candidacyId                 String                        @unique @map("candidacy_id") @db.Uuid
  companion                   Organism?                     @relation(fields: [companionId], references: [id], onDelete: Cascade)
  companionId                 String?                       @map("companion_id") @db.Uuid
  diagnosisHourCount          Int                           @map("diagnosis_hour_count")
  diagnosisCost               Decimal                       @map("diagnosis_cost") @db.Decimal(10, 2)
  postExamHourCount           Int                           @map("post_exam_hour_count")
  postExamCost                Decimal                       @map("post_exam_cost") @db.Decimal(10, 2)
  individualHourCount         Int                           @map("individual_hour_count")
  individualCost              Decimal                       @map("individual_cost") @db.Decimal(10, 2)
  collectiveHourCount         Int                           @map("collective_hour_count")
  collectiveCost              Decimal                       @map("collective_cost") @db.Decimal(10, 2)
  basicSkills                 BasicSkillOnFundingRequests[]
  basicSkillsHourCount        Int                           @map("basic_skills_hour_count")
  basicSkillsCost             Decimal                       @map("basic_skills_cost") @db.Decimal(10, 2)
  mandatoryTrainings          TrainingOnFundingRequests[]
  mandatoryTrainingsHourCount Int                           @map("mandatory_training_hour_count")
  mandatoryTrainingsCost      Decimal                       @map("mandatory_training_cost") @db.Decimal(10, 2)
  certificateSkills           String                        @map("certificate_skills")
  certificateSkillsHourCount  Int                           @map("certificate_skills_hour_count")
  certificateSkillsCost       Decimal                       @map("certificate_skills_cost") @db.Decimal(10, 2)
  otherTraining               String                        @map("other_training")
  otherTrainingHourCount      Int                           @default(0) @map("other_training_hour_count")
  otherTrainingCost           Decimal                       @default(0) @map("other_training_cost") @db.Decimal(10, 2)
  examHourCount               Int                           @map("exam_hour_count")
  examCost                    Decimal                       @map("exam_cost") @db.Decimal(10, 2)
  fundingRequestBatch         FundingRequestBatch?
  numAction                   String                        @default("TO_MIGRATE") @map("num_action")
  createdAt                   DateTime?                     @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@map("funding_request")
}

model BasicSkillOnFundingRequests {
  basicSkill       BasicSkill     @relation(fields: [basicSkillId], references: [id])
  basicSkillId     String         @map("basic_skill_id") @db.Uuid
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String         @map("funding_request_id") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?      @map("updated_at") @db.Timestamptz(6)

  @@id([basicSkillId, fundingRequestId])
  @@map("basic_skill_funding_request")
}

model TrainingOnFundingRequests {
  training         Training       @relation(fields: [trainingId], references: [id])
  trainingId       String         @map("training_id") @db.Uuid
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String         @map("funding_request_id") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?      @map("updated_at") @db.Timestamptz(6)

  @@id([trainingId, fundingRequestId])
  @@map("training_funding_request")
}

model FundingRequestBatch {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String         @unique @map("funding_request_id") @db.Uuid
  sent             Boolean        @default(false)
  content          Json

  @@map("funding_request_batch")
}

model DropOutReason {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label       String             @unique @db.VarChar(255)
  candidacies CandidacyDropOut[] @relation()
  isActive    Boolean            @default(true) @map("is_active")
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?          @map("updated_at") @db.Timestamptz(6)

  @@map("drop_out_reason")
}

model CandidacyDropOut {
  candidacy                         Candidacy           @relation(fields: [candidacyId], references: [id])
  candidacyId                       String              @unique @map("candidacy_id") @db.Uuid
  dropOutReason                     DropOutReason       @relation(fields: [dropOutReasonId], references: [id])
  dropOutReasonId                   String              @map("drop_out_reason_id") @db.Uuid
  status                            CandidacyStatusStep
  otherReasonContent                String?             @map("other_reason_content")
  proofReceivedByAdmin              Boolean             @default(false) @map("proof_received_by_admin")
  dropOutConfirmedByCandidate       Boolean             @default(false) @map("drop_out_confirmed_by_candidate")
  createdAt                         DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                         DateTime?           @map("updated_at") @db.Timestamptz(6)
  validatedAt                       DateTime?           @map("validated_at") @db.Timestamptz(6)
  autoDropOutConfirmationEmailsSent Boolean             @default(false) @map("auto_drop_out_confirmation_emails_sent")

  @@id([candidacyId])
  @@map("candidacy_drop_out")
}

model ReorientationReason {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label       String      @unique @db.VarChar(255)
  candidacies Candidacy[] @relation()
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?   @map("updated_at") @db.Timestamptz(6)
  disabled    Boolean     @default(false)

  @@map("reorientation_reason")
}

enum AdmissibilityStatus {
  ADMISSIBLE
  NOT_ADMISSIBLE
}

model Admissibility {
  id                             String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                      Candidacy            @relation(fields: [candidacyId], references: [id])
  candidacyId                    String               @unique @map("candidacy_id") @db.Uuid
  isCandidateAlreadyAdmissible   Boolean              @default(false) @map("is_candidate_already_admissible")
  reportSentAt                   DateTime?            @map("report_sent_at")
  certifierRespondedAt           DateTime?            @map("certifier_responded_at")
  responseAvailableToCandidateAt DateTime?            @map("response_available_to_candidate_at")
  status                         AdmissibilityStatus? @map("status")
  createdAt                      DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                      DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@map("admissibility")
}

model PaymentRequest {
  id                                   String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                            Candidacy            @relation(fields: [candidacyId], references: [id])
  candidacyId                          String               @unique @map("candidacy_id") @db.Uuid
  diagnosisEffectiveHourCount          Int                  @map("diagnosis_effective_hour_count")
  diagnosisEffectiveCost               Decimal              @map("diagnosis_effective_cost") @db.Decimal(10, 2)
  postExamEffectiveHourCount           Int                  @map("post_exam_effective_hour_count")
  postExamEffectiveCost                Decimal              @map("post_exam_effective_cost") @db.Decimal(10, 2)
  individualEffectiveHourCount         Int                  @map("individual_effective_hour_count")
  individualEffectiveCost              Decimal              @map("individual_effective_cost") @db.Decimal(10, 2)
  collectiveEffectiveHourCount         Int                  @map("collective_effective_hour_count")
  collectiveEffectiveCost              Decimal              @map("collective_effective_cost") @db.Decimal(10, 2)
  mandatoryTrainingsEffectiveHourCount Int                  @map("mandatory_training_effective_hour_count")
  mandatoryTrainingsEffectiveCost      Decimal              @map("mandatory_training_effective_cost") @db.Decimal(10, 2)
  basicSkillsEffectiveHourCount        Int                  @map("basic_skills_effective_hour_count")
  basicSkillsEffectiveCost             Decimal              @map("basic_skills_effective_cost") @db.Decimal(10, 2)
  certificateSkillsEffectiveHourCount  Int                  @map("certificate_skills_effective_hour_count")
  certificateSkillsEffectiveCost       Decimal              @map("certificate_skills_effective_cost") @db.Decimal(10, 2)
  examEffectiveHourCount               Int                  @map("exam_effective_hour_count")
  examEffectiveCost                    Decimal              @map("exam_effective_cost") @db.Decimal(10, 2)
  otherTrainingEffectiveHourCount      Int                  @default(0) @map("other_training_effective_hour_count")
  otherTrainingEffectiveCost           Decimal              @default(0) @map("other_training_effective_cost") @db.Decimal(10, 2)
  invoiceNumber                        String               @map("invoice_number")
  PaymentRequestBatch                  PaymentRequestBatch?
  createdAt                            DateTime?            @default(now()) @map("created_at") @db.Timestamptz(6)
  confirmedAt                          DateTime?            @map("confirmed_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@index([candidacyId, confirmedAt])
  @@map("payment_request")
}

model PaymentRequestBatch {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  paymentRequest   PaymentRequest @relation(fields: [paymentRequestId], references: [id])
  paymentRequestId String         @unique @map("payment_request_id") @db.Uuid
  sent             Boolean        @default(false)
  content          Json

  @@map("payment_request_batch")
}

model FileUploadSpooler {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  destinationFileName String   @map("destination_file_name") @db.VarChar(255)
  destinationPath     String   @map("destination_path") @db.VarChar(255)
  description         String   @map("description") @db.VarChar(255)
  fileContent         Bytes    @map("file_content")

  @@map("file_upload_spooler")
}

model PaymentRequestUnifvae {
  id                                   String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                            Candidacy                   @relation(fields: [candidacyId], references: [id])
  candidacyId                          String                      @unique @map("candidacy_id") @db.Uuid
  individualEffectiveHourCount         Decimal                     @map("individual_effective_hour_count") @db.Decimal(10, 2)
  individualEffectiveCost              Decimal                     @map("individual_effective_cost") @db.Decimal(10, 2)
  collectiveEffectiveHourCount         Decimal                     @map("collective_effective_hour_count") @db.Decimal(10, 2)
  collectiveEffectiveCost              Decimal                     @map("collective_effective_cost") @db.Decimal(10, 2)
  mandatoryTrainingsEffectiveHourCount Decimal                     @map("mandatory_training_effective_hour_count") @db.Decimal(10, 2)
  mandatoryTrainingsEffectiveCost      Decimal                     @map("mandatory_training_effective_cost") @db.Decimal(10, 2)
  basicSkillsEffectiveHourCount        Decimal                     @map("basic_skills_effective_hour_count") @db.Decimal(10, 2)
  basicSkillsEffectiveCost             Decimal                     @map("basic_skills_effective_cost") @db.Decimal(10, 2)
  certificateSkillsEffectiveHourCount  Decimal                     @map("certificate_skills_effective_hour_count") @db.Decimal(10, 2)
  certificateSkillsEffectiveCost       Decimal                     @map("certificate_skills_effective_cost") @db.Decimal(10, 2)
  otherTrainingEffectiveHourCount      Decimal                     @default(0) @map("other_training_effective_hour_count") @db.Decimal(10, 2)
  otherTrainingEffectiveCost           Decimal                     @default(0) @map("other_training_effective_cost") @db.Decimal(10, 2)
  invoiceNumber                        String                      @map("invoice_number")
  PaymentRequestBatchUnifvae           PaymentRequestBatchUnifvae?
  createdAt                            DateTime?                   @default(now()) @map("created_at") @db.Timestamptz(6)
  confirmedAt                          DateTime?                   @map("confirmed_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@index([candidacyId, confirmedAt])
  @@map("payment_request_unifvae")
}

model PaymentRequestBatchUnifvae {
  id                      String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  paymentRequestUnifvae   PaymentRequestUnifvae @relation(fields: [paymentRequestUnifvaeId], references: [id])
  paymentRequestUnifvaeId String                @unique @map("payment_request_id") @db.Uuid
  sent                    Boolean               @default(false)
  content                 Json
  createdAt               DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("payment_request_batch_unifvae")
}

enum LegalStatus {
  EI
  EURL
  SARL
  SAS
  SASU
  SA
  EIRL
  ASSOCIATION_LOI_1901
  ETABLISSEMENT_PUBLIC
  FONDATION
  AUTRE
  NC
}

enum SubscriptionRequestStatus {
  PENDING
  REJECTED
}

enum OrganismTypology {
  experimentation
  expertFiliere
  expertBranche
  expertBrancheEtFiliere
}

view AvailableCertificationBasedOnFormacode {
  certification                 Certification            @relation(fields: [certificationId], references: [id])
  certificationId               String                   @map("certification_id") @db.Uuid
  certification_searchable_text Unsupported("tsvector")?

  @@unique([certificationId])
  @@map("available_certification_based_on_formacode")
}

view ActiveOrganismByAvailableCertificationBasedOnFormacode {
  organism                      Organism                 @relation(fields: [organismId], references: [id], onDelete: Cascade)
  certification                 Certification            @relation(fields: [certificationId], references: [id])
  organismId                    String                   @map("organism_id") @db.Uuid
  certificationId               String                   @map("certification_id") @db.Uuid
  certification_searchable_text Unsupported("tsvector")?

  @@unique([organismId, certificationId])
  @@map("active_organism_by_available_certification_based_on_formacode")
}

model ConventionCollective {
  id                                  String                                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                               String                                @db.VarChar(255)
  code                                String                                @unique @map("ccid") @db.VarChar(10)
  organismOnConventionCollective      OrganismOnConventionCollective[]
  certificationOnConventionCollective CertificationOnConventionCollective[]
  maisonMereAAPOnConventionCollective MaisonMereAAPOnConventionCollective[]

  @@map("convention_collective")
}

model OrganismOnConventionCollective {
  ccn        ConventionCollective @relation(fields: [ccnId], references: [id])
  ccnId      String               @map("ccn_id") @db.Uuid
  organism   Organism             @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId String               @map("organism_id") @db.Uuid
  createdAt  DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@id([ccnId, organismId])
  @@map("organism_on_ccn")
}

model CertificationOnConventionCollective {
  id              String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ccn             ConventionCollective @relation(fields: [ccnId], references: [id])
  ccnId           String               @map("ccn_id") @db.Uuid
  certification   Certification        @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId String               @map("certification_id") @db.Uuid
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@unique([ccnId, certificationId])
  @@index([certificationId])
  @@map("certification_on_ccn")
}

enum ExamResult {
  SUCCESS
  PARTIAL_SUCCESS
  PARTIAL_CERTIFICATION_SUCCESS
  FAILURE
}

model ExamInfo {
  id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy         Candidacy   @relation(fields: [candidacyId], references: [id])
  candidacyId       String      @unique @map("candidacy_id") @db.Uuid
  examResult        ExamResult? @map("exam_result")
  estimatedExamDate DateTime?   @map("estimated_exam_date")
  actualExamDate    DateTime?   @map("actual_exam_date")
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("exam_info")
}

model CertificationAuthorityStructure {
  id             String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label          String          @unique @db.VarChar(200)
  cguVersion     Int?            @map("cgu_version")
  cguAcceptedAt  DateTime?       @map("cgu_accepted_at")
  certifications Certification[]

  certificationRegistryManager                            CertificationRegistryManager?
  certificationAuthorityOnCertificationAuthorityStructure CertificationAuthorityOnCertificationAuthorityStructure[]

  @@map("certification_authority_structure")
}

model CertificationAuthority {
  id                                                        String                                                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                                     String                                                      @db.VarChar(200)
  contactFullName                                           String?                                                     @map("contact_full_name") @db.VarChar(200)
  contactEmail                                              String?                                                     @map("contact_email") @db.VarChar(200)
  contactPhone                                              String?                                                     @map("contact_phone") @db.VarChar(25)
  createdAt                                                 DateTime                                                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                 DateTime?                                                   @map("updated_at") @db.Timestamptz(6)
  certificationAuthorityOnDepartment                        CertificationAuthorityOnDepartment[]
  certificationAuthorityOnCertification                     CertificationAuthorityOnCertification[]
  Account                                                   Account[]
  Feasibility                                               Feasibility[]
  certificationAuthorityLocalAccount                        CertificationAuthorityLocalAccount[]
  DossierDeValidation                                       DossierDeValidation[]
  Jury                                                      Jury[]
  showLocalAccountsContactInfo                              Boolean                                                     @default(true) @map("show_local_accounts_contact_info")
  certificationAuthorityOnCertificationAuthorityStructure   CertificationAuthorityOnCertificationAuthorityStructure[]
  certificationCohorteVaeCollectiveOnCertificationAuthority CertificationCohorteVaeCollectiveOnCertificationAuthority[]

  @@map("certification_authority")
}

model CertificationAuthorityOnCertificationAuthorityStructure {
  id                                String                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationAuthority            CertificationAuthority          @relation(map: "ca_on_cas_ca", fields: [certificationAuthorityId], references: [id], onDelete: Cascade)
  certificationAuthorityId          String                          @map("certification_authority_id") @db.Uuid
  certificationAuthorityStructure   CertificationAuthorityStructure @relation(map: "ca_on_cas_cas", fields: [certificationAuthorityStructureId], references: [id], onDelete: Cascade)
  certificationAuthorityStructureId String                          @map("certification_authority_structure_id") @db.Uuid
  createdAt                         DateTime                        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                         DateTime?                       @map("updated_at") @db.Timestamptz(6)

  @@unique([certificationAuthorityId, certificationAuthorityStructureId])
  @@map("certification_authority_on_certification_authority_structure")
}

model CertificationRegistryManager {
  id                                String                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt                         DateTime                        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                         DateTime?                       @updatedAt @map("updated_at") @db.Timestamptz(6)
  accountId                         String                          @map("account_id") @db.Uuid
  account                           Account                         @relation(fields: [accountId], references: [id])
  certificationAuthorityStructure   CertificationAuthorityStructure @relation(fields: [certificationAuthorityStructureId], references: [id], onDelete: Restrict)
  certificationAuthorityStructureId String                          @unique @map("certification_authority_structure_id") @db.Uuid

  @@index([accountId])
  @@index([certificationAuthorityStructureId])
  @@map("certification_registry_manager")
}

model CertificationAuthorityOnDepartment {
  id                       String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationAuthority   CertificationAuthority @relation(fields: [certificationAuthorityId], references: [id], onDelete: Cascade)
  certificationAuthorityId String                 @map("certification_authority_id") @db.Uuid
  department               Department             @relation(fields: [departmentId], references: [id], onDelete: NoAction)
  departmentId             String                 @map("department_id") @db.Uuid
  createdAt                DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?              @map("updated_at") @db.Timestamptz(6)

  @@unique([certificationAuthorityId, departmentId])
  @@map("certification_authority_on_department")
}

model CertificationAuthorityOnCertification {
  id                       String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationAuthority   CertificationAuthority @relation(fields: [certificationAuthorityId], references: [id], onDelete: Cascade)
  certificationAuthorityId String                 @map("certification_authority_id") @db.Uuid
  certification            Certification          @relation(fields: [certificationId], references: [id], onDelete: NoAction)
  certificationId          String                 @map("certification_id") @db.Uuid
  createdAt                DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?              @map("updated_at") @db.Timestamptz(6)

  @@unique([certificationAuthorityId, certificationId])
  @@map("certification_authority_on_certification")
}

model CertificationAuthorityLocalAccount {
  id                                                                                            String                                                                                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  contactFullName                                                                               String?                                                                                         @map("contact_full_name") @db.VarChar(200)
  contactEmail                                                                                  String?                                                                                         @map("contact_email") @db.VarChar(200)
  contactPhone                                                                                  String?                                                                                         @map("contact_phone") @db.VarChar(25)
  createdAt                                                                                     DateTime                                                                                        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                                                     DateTime?                                                                                       @map("updated_at") @db.Timestamptz(6)
  accountId                                                                                     String                                                                                          @unique @map("account_id") @db.Uuid
  account                                                                                       Account                                                                                         @relation(fields: [accountId], references: [id])
  certificationAuthorityLocalAccountOnCertification                                             CertificationAuthorityLocalAccountOnCertification[]
  certificationAuthorityLocalAccountOnDepartment                                                CertificationAuthorityLocalAccountOnDepartment[]
  certificationAuthority                                                                        CertificationAuthority                                                                          @relation(fields: [certificationAuthorityId], references: [id], onDelete: NoAction)
  certificationAuthorityId                                                                      String                                                                                          @map("certification_authority_id") @db.Uuid
  certificationAuthorityLocalAccountOnCandidacy                                                 CertificationAuthorityLocalAccountOnCandidacy[]
  CertificationCohorteVaeCollectiveOnCertificationAuthorityOnCertificationAuthorityLocalAccount CertificationCohorteVaeCollectiveOnCertificationAuthorityOnCertificationAuthorityLocalAccount[]

  @@index([accountId])
  @@index([certificationAuthorityId])
  @@map("certification_authority_local_account")
}

model CertificationAuthorityLocalAccountOnCertification {
  id                                   String                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationAuthorityLocalAccount   CertificationAuthorityLocalAccount @relation(fields: [certificationAuthorityLocalAccountId], references: [id], onDelete: Cascade)
  certificationAuthorityLocalAccountId String                             @map("certification_authority_local_account_id") @db.Uuid
  certificationId                      String                             @map("certification_id") @db.Uuid
  certification                        Certification                      @relation(map: "calaoc_certification", fields: [certificationId], references: [id], onDelete: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)

  @@unique([certificationAuthorityLocalAccountId, certificationId])
  @@map("certification_authority_local_account_on_certification")
}

model CertificationAuthorityLocalAccountOnDepartment {
  id                                   String                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationAuthorityLocalAccount   CertificationAuthorityLocalAccount @relation(fields: [certificationAuthorityLocalAccountId], references: [id], onDelete: Cascade)
  certificationAuthorityLocalAccountId String                             @map("certification_authority_local_account_id") @db.Uuid
  departmentId                         String                             @map("department_id") @db.Uuid
  department                           Department                         @relation(map: "calaoc_department", fields: [departmentId], references: [id], onDelete: NoAction)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)

  @@unique([certificationAuthorityLocalAccountId, departmentId])
  @@map("certification_authority_local_account_on_department")
}

model CertificationAuthorityLocalAccountOnCandidacy {
  id                                   String                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationAuthorityLocalAccount   CertificationAuthorityLocalAccount @relation(fields: [certificationAuthorityLocalAccountId], references: [id], onDelete: Cascade)
  certificationAuthorityLocalAccountId String                             @map("certification_authority_local_account_id") @db.Uuid
  candidacyId                          String                             @map("candidacy_id") @db.Uuid
  candidacy                            Candidacy                          @relation(map: "calaoc_candidacy", fields: [candidacyId], references: [id], onDelete: NoAction)
  hasBeenTransfered                    Boolean?

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @map("updated_at") @db.Timestamptz(6)

  @@unique([certificationAuthorityLocalAccountId, candidacyId])
  @@map("certification_authority_local_account_on_candidacy")
}

enum FeasibilityStatus {
  DRAFT
  PENDING
  REJECTED
  ADMISSIBLE
  INCOMPLETE
  COMPLETE
}

model Feasibility {
  id                            String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                     Candidacy                      @relation(fields: [candidacyId], references: [id])
  candidacyId                   String                         @map("candidacy_id") @db.Uuid
  certificationAuthority        CertificationAuthority?        @relation(fields: [certificationAuthorityId], references: [id], onDelete: NoAction)
  certificationAuthorityId      String?                        @map("certification_authority_id") @db.Uuid
  feasibilityFileSentAt         DateTime?                      @map("feasibility_file_sent_at") @db.Timestamptz(6)
  decision                      FeasibilityStatus              @default(DRAFT)
  decisionComment               String?                        @map("decision_comment")
  decisionSentAt                DateTime?                      @map("decision_sent_at") @db.Timestamptz(6)
  decisionFileId                String?                        @map("decision_file_id") @db.Uuid
  decisionFile                  File?                          @relation("decision_file", fields: [decisionFileId], references: [id])
  isActive                      Boolean                        @default(true) @map("is_active")
  createdAt                     DateTime                       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime?                      @updatedAt @map("updated_at") @db.Timestamptz(6)
  feasibilityFormat             FeasibilityFormat              @default(UPLOADED_PDF) @map("feasibility_format")
  feasibilityUploadedPdf        FeasibilityUploadedPdf?
  dematerializedFeasibilityFile DematerializedFeasibilityFile?
  feasibilityDecisionHistory    FeasibilityDecision[]

  @@index([candidacyId, isActive])
  @@index([certificationAuthorityId, isActive])
  @@map("feasibility")
}

model FeasibilityDecision {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  feasibility     Feasibility       @relation(fields: [feasibilityId], references: [id])
  feasibilityId   String            @map("feasibility_id") @db.Uuid
  decision        FeasibilityStatus
  decisionComment String?           @map("decision_comment")
  decisionSentAt  DateTime          @default(now()) @map("decision_sent_at") @db.Timestamptz(6)

  @@map("feasibility_decision")
}

model FeasibilityUploadedPdf {
  id                            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  feasibilityFile               File        @relation("feasibility_file", fields: [feasibilityFileId], references: [id])
  IDFile                        File?       @relation("ID_file", fields: [IDFileId], references: [id])
  documentaryProofFile          File?       @relation("documentary_proof_file", fields: [documentaryProofFileId], references: [id])
  feasibilityFileId             String      @map("feasibility_file_id") @db.Uuid
  IDFileId                      String?     @map("ID_file_id") @db.Uuid
  documentaryProofFileId        String?     @map("documentary_proof_file_id") @db.Uuid
  certificateOfAttendanceFile   File?       @relation("certificate_of_attendance_file", fields: [certificateOfAttendanceFileId], references: [id])
  certificateOfAttendanceFileId String?     @map("certificate_of_attendance_file_id") @db.Uuid
  Feasibility                   Feasibility @relation(fields: [feasibilityId], references: [id], onDelete: Cascade)
  feasibilityId                 String      @unique @map("feasibility_id") @db.Uuid

  @@map("feasibility_uploaded_pdf")
}

enum DossierDeValidationStatus {
  PENDING
  INCOMPLETE
}

model DossierDeValidation {
  id                            String                                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                     Candidacy                             @relation(fields: [candidacyId], references: [id])
  candidacyId                   String                                @map("candidacy_id") @db.Uuid
  certificationAuthority        CertificationAuthority                @relation(fields: [certificationAuthorityId], references: [id], onDelete: NoAction)
  certificationAuthorityId      String                                @map("certification_authority_id") @db.Uuid
  dossierDeValidationFile       File                                  @relation("dossier_de_validation_file", fields: [dossierDeValidationFileId], references: [id])
  dossierDeValidationFileId     String                                @unique @map("dossier_de_validation_file_id") @db.Uuid
  dossierDeValidationOtherFiles DossierDeValidationOtherFilesOnFile[]
  dossierDeValidationSentAt     DateTime?                             @map("dossier_de_validation_file_sent_at") @db.Timestamptz(6)
  decision                      DossierDeValidationStatus             @default(PENDING)
  decisionComment               String?                               @map("decision_comment")
  decisionSentAt                DateTime?                             @map("decision_sent_at") @db.Timestamptz(6)
  isActive                      Boolean                               @default(true) @map("is_active")
  createdAt                     DateTime                              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                     DateTime?                             @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([candidacyId, isActive])
  @@index([certificationAuthorityId, isActive])
  @@map("dossier_de_validation")
}

model DossierDeValidationOtherFilesOnFile {
  id                    String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dossierDeValidation   DossierDeValidation @relation(fields: [dossierDeValidationId], references: [id], onDelete: Cascade)
  dossierDeValidationId String              @map("dossier_de_validation_id") @db.Uuid
  file                  File                @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId                String              @map("file_id") @db.Uuid

  @@map("dossier_de_validation_other_files_on_file")
}

model Jury {
  id                                         String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                                  Candidacy              @relation(fields: [candidacyId], references: [id])
  candidacyId                                String                 @map("candidacy_id") @db.Uuid
  certificationAuthority                     CertificationAuthority @relation(fields: [certificationAuthorityId], references: [id], onDelete: NoAction)
  certificationAuthorityId                   String                 @map("certification_authority_id") @db.Uuid
  convocationFile                            File?                  @relation("convocation_file", fields: [convocationFileId], references: [id])
  convocationFileId                          String?                @map("convocation_file_id") @db.Uuid
  dateOfSession                              DateTime               @map("date_of_session") @db.Timestamptz(6)
  timeOfSession                              String?                @map("time_of_session")
  timeSpecified                              Boolean                @default(false) @map("time_specified")
  addressOfSession                           String?                @map("address_of_session")
  informationOfSession                       String?                @map("information_of_session")
  result                                     String?                @map("result")
  dateOfResult                               DateTime?              @map("date_of_result") @db.Timestamptz(6)
  informationOfResult                        String?                @map("information_of_result")
  isResultTemporary                          Boolean?               @map("is_result_temporary")
  isActive                                   Boolean                @default(true) @map("is_active")
  createdAt                                  DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                  DateTime?              @updatedAt @map("updated_at") @db.Timestamptz(6)
  reminderToCandidateWithScheduledJurySendAt DateTime?              @map("reminder_to_candidate_with_scheduled_jury_send_at") @db.Timestamptz(6)

  @@index([candidacyId, isActive])
  @@index([certificationAuthorityId, isActive])
  @@map("jury")
}

model File {
  id                                                                          String                                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                                                                        String                                   @map("name") @db.VarChar(255)
  mimeType                                                                    String                                   @map("mime_type") @db.VarChar(255)
  createdAt                                                                   DateTime                                 @default(now()) @map("created_at") @db.Timestamptz(6)
  path                                                                        String
  linkedAsFeasibilityFileBy                                                   FeasibilityUploadedPdf[]                 @relation("feasibility_file")
  linkedAsIDFileBy                                                            FeasibilityUploadedPdf[]                 @relation("ID_file")
  linkedAsDocumentaryProofFileBy                                              FeasibilityUploadedPdf[]                 @relation("documentary_proof_file")
  linkedAsCertificateOfAttendanceFileBy                                       FeasibilityUploadedPdf[]                 @relation("certificate_of_attendance_file")
  linkedAsDecisionFileBy                                                      Feasibility[]                            @relation("decision_file")
  DossierDeValidationFile                                                     DossierDeValidation?                     @relation("dossier_de_validation_file")
  DossierDeValidationOtherFiles                                               DossierDeValidationOtherFilesOnFile[]
  Jury                                                                        Jury[]                                   @relation("convocation_file")
  linkedAsMaisonMereAAPAttestationUrssafFile                                  MaisonMereAAPLegalInformationDocuments[] @relation("mmaap_attestation_urssaf_file")
  linkedAsMaisonMereAAPJustificatifIdentiteDirigeantFile                      MaisonMereAAPLegalInformationDocuments[] @relation("mmaap_justificatif_identite_dirigeant_file")
  linkedAsLettreDeDelegationFile                                              MaisonMereAAPLegalInformationDocuments[] @relation("mmaap_lettre_de_delegation_file")
  linkedAsJustificatifIdentiteDelegataireFile                                 MaisonMereAAPLegalInformationDocuments[] @relation("mmaap_justificatif_identite_delegataire_file")
  linkedAsMaisonMereAAPAttestationUrssafFileInSubscriptionRequest             SubscriptionRequest[]                    @relation("sr_attestation_urssaf_file")
  linkedAsMaisonMereAAPJustificatifIdentiteDirigeantFileInSubscriptionRequest SubscriptionRequest[]                    @relation("sr_justificatif_identite_dirigeant_file")
  linkedAsLettreDeDelegationFileInSubscriptionRequest                         SubscriptionRequest[]                    @relation("sr_lettre_de_delegation_file")
  linkedAsJustificatifIdentiteDelegataireFileInSubscriptionRequest            SubscriptionRequest[]                    @relation("sr_justificatif_identite_delegataire_file")
  linkedAsDFFAttachment                                                       DFFAttachment?                           @relation("dff_attachment")
  linkedAsSwornStatementFile                                                  DematerializedFeasibilityFile?           @relation("sworn_statement_file")
  linkedAsCertificationAdditionalInfo                                         CertificationAdditionalInfo[]

  @@map("file")
}

model FundingRequestUnifvae {
  id                          String                               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                   Candidacy                            @relation(fields: [candidacyId], references: [id])
  candidacyId                 String                               @unique @map("candidacy_id") @db.Uuid
  numAction                   String                               @default("TO_MIGRATE") @map("num_action")
  isPartialCertification      Boolean                              @default(false)
  candidateFirstname          String                               @default("") @map("candidate_firstname")
  candidateSecondname         String?                              @map("candidate_secondname")
  candidateThirdname          String?                              @map("candidate_thirdname")
  candidateLastname           String                               @default("") @map("candidate_lastname")
  candidateGender             Gender                               @default(undisclosed) @map("candidate_gender")
  individualHourCount         Decimal                              @map("individual_hour_count") @db.Decimal(5, 1)
  individualCost              Decimal                              @map("individual_cost") @db.Decimal(10, 2)
  collectiveHourCount         Decimal                              @map("collective_hour_count") @db.Decimal(5, 1)
  collectiveCost              Decimal                              @map("collective_cost") @db.Decimal(10, 2)
  basicSkills                 BasicSkillOnFundingRequestsUnifvae[]
  basicSkillsHourCount        Decimal                              @map("basic_skills_hour_count") @db.Decimal(5, 1)
  basicSkillsCost             Decimal                              @map("basic_skills_cost") @db.Decimal(10, 2)
  mandatoryTrainings          TrainingOnFundingRequestsUnifvae[]
  mandatoryTrainingsHourCount Decimal                              @map("mandatory_training_hour_count") @db.Decimal(5, 1)
  mandatoryTrainingsCost      Decimal                              @map("mandatory_training_cost") @db.Decimal(10, 2)
  certificateSkills           String                               @map("certificate_skills")
  certificateSkillsHourCount  Decimal                              @map("certificate_skills_hour_count") @db.Decimal(5, 1)
  certificateSkillsCost       Decimal                              @map("certificate_skills_cost") @db.Decimal(10, 2)
  otherTraining               String                               @map("other_training")
  otherTrainingHourCount      Decimal                              @default(0) @map("other_training_hour_count") @db.Decimal(5, 1)
  otherTrainingCost           Decimal                              @default(0) @map("other_training_cost") @db.Decimal(10, 2)
  fundingContactFirstname     String?                              @map("funding_contact_firstname") @db.VarChar(200)
  fundingContactLastname      String?                              @map("funding_contact_lastname") @db.VarChar(200)
  fundingContactEmail         String?                              @map("funding_contact_email") @db.VarChar(200)
  fundingContactPhone         String?                              @map("funding_contact_phone") @db.VarChar(50)
  fundingRequestBatchUnifvae  FundingRequestBatchUnifvae?
  typeForfaitJury             TypeForfaitJuryFundingRequestUnifvae @default(FORFAIT_SEPARE_FAISABILITE_ET_ENTRETIEN_POST_JURY) @map("type_forfait_jury")
  createdAt                   DateTime?                            @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@map("funding_request_unifvae")
}

enum TypeForfaitJuryFundingRequestUnifvae {
  FORFAIT_UNIQUE
  FORFAIT_SEPARE_FAISABILITE_ET_ENTRETIEN_POST_JURY
}

model BasicSkillOnFundingRequestsUnifvae {
  basicSkill              BasicSkill            @relation(fields: [basicSkillId], references: [id])
  basicSkillId            String                @map("basic_skill_id") @db.Uuid
  createdAt               DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?             @map("updated_at") @db.Timestamptz(6)
  FundingRequestUnifvae   FundingRequestUnifvae @relation(fields: [fundingRequestUnifvaeId], references: [id])
  fundingRequestUnifvaeId String                @map("funding_request_unifvae_id") @db.Uuid

  @@id([basicSkillId, fundingRequestUnifvaeId])
  @@map("basic_skill_funding_request_unifvae")
}

model TrainingOnFundingRequestsUnifvae {
  training                Training              @relation(fields: [trainingId], references: [id])
  trainingId              String                @map("training_id") @db.Uuid
  fundingRequestUnifvae   FundingRequestUnifvae @relation(fields: [fundingRequestUnifvaeId], references: [id])
  fundingRequestUnifvaeId String                @map("funding_request_unifvae_id") @db.Uuid
  createdAt               DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime?             @map("updated_at") @db.Timestamptz(6)

  @@id([trainingId, fundingRequestUnifvaeId])
  @@map("training_funding_request_unifvae")
}

model FundingRequestBatchUnifvae {
  id               String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fundingRequest   FundingRequestUnifvae @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String                @unique @map("funding_request_id") @db.Uuid
  sent             Boolean               @default(false)
  content          Json
  createdAt        DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("funding_request_batch_unifvae")
}

model AuditEvent {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  accountId String   @map("account_id") @db.Uuid
  account   Account  @relation(fields: [accountId], references: [keycloakId])
  type      String   @db.VarChar(255)
  content   Json

  @@map("audit_event")
}

enum StatutValidationInformationsJuridiquesMaisonMereAAP {
  A_METTRE_A_JOUR
  EN_ATTENTE_DE_VERIFICATION
  A_JOUR
}

model ProfessionalCgu {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  version   Int      @default(autoincrement()) @map("version")

  @@map("professional_cgu")
}

model ProfessionalCguCertificateur {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  version   Int      @default(autoincrement()) @map("version")

  @@map("professional_cgu_certificateur")
}

model MaisonMereAAP {
  id                                  String                                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  raisonSociale                       String                                @map("raison_sociale") @db.VarChar(255)
  statutJuridique                     LegalStatus                           @map("statut_juridique")
  siret                               String                                @map("siret") @db.VarChar(255)
  phone                               String?                               @map("phone") @db.VarChar(50)
  typologie                           OrganismTypology                      @map("typologie")
  maisonMereAAPOnConventionCollective MaisonMereAAPOnConventionCollective[]
  siteWeb                             String?                               @map("site_web") @db.VarChar(255)
  dateExpirationCertificationQualiopi DateTime                              @map("date_expiration_certification_qualiopi")
  cguVersion                          Int?                                  @map("cgu_version")
  cguAcceptedAt                       DateTime?                             @map("cgu_accepted_at")
  managerFirstname                    String?                               @map("manager_firstname")
  managerLastname                     String?                               @map("manager_lastname")
  showAccountSetup                    Boolean                               @default(false) @map("show_account_setup")
  isActive                            Boolean                               @default(false) @map("is_active")
  isSignalized                        Boolean                               @default(false) @map("is_signalized")

  gestionnaire                                        Account                                             @relation(fields: [gestionnaireAccountId], references: [id])
  gestionnaireAccountId                               String                                              @map("gestionnaire_account_id") @db.Uuid
  createdAt                                           DateTime                                            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                           DateTime?                                           @map("updated_at") @db.Timestamptz(6)
  organismes                                          Organism[]
  statutValidationInformationsJuridiquesMaisonMereAAP StatutValidationInformationsJuridiquesMaisonMereAAP @default(A_METTRE_A_JOUR) @map("statut_validation_informations_juridiques_maison_mere_aap")
  maisonMereAAPLegalInformationDocuments              MaisonMereAAPLegalInformationDocuments?
  maisonMereAAPLegalInformationDocumentsDecision      MaisonMereAAPLegalInformationDocumentsDecision[]
  isMCFCompatible                                     Boolean?                                            @map("is_mcf_compatible")
  AAPLog                                              AAPLog[]

  @@index([typologie])
  @@index([gestionnaireAccountId])
  @@map("maison_mere_aap")
}

model MaisonMereAAPOnConventionCollective {
  ccn             ConventionCollective @relation(fields: [ccnId], references: [id])
  ccnId           String               @map("ccn_id") @db.Uuid
  maisonMereAAP   MaisonMereAAP        @relation(fields: [maisonMereAAPId], references: [id])
  maisonMereAAPId String               @map("maison_mere_aap_id") @db.Uuid
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@id([ccnId, maisonMereAAPId])
  @@map("maison_mere_aap_on_ccn")
}

model CandidacyConventionCollective {
  id         String    @id @db.Uuid
  idcc       String    @unique @map("idcc") @db.VarChar(10)
  label      String    @db.Text
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamptz(6)
  disabledAt DateTime? @map("disabled_at") @db.Timestamptz(6)

  Candidacy Candidacy[]

  @@map("candidacy_convention_collective")
}

model FeatureBetaTest {
  id           String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  account      Account @relation(fields: [accountEmail], references: [email])
  feature      Feature @relation(fields: [featureKey], references: [key])
  accountEmail String  @map("account_email")
  featureKey   String  @map("feature_key")

  @@map("feature_beta_test")
}

enum CandidacyLogUserProfile {
  ADMIN
  CANDIDAT
  CERTIFICATEUR
  AAP
}

model CandidacyLog {
  id             String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userKeycloakId String @map("user_keycloak_id") @db.Uuid
  userEmail      String @map("user_email") @db.VarChar(255)

  userProfile CandidacyLogUserProfile @map("user_profile")
  candidacyId String                  @map("candidacy_id") @db.Uuid
  eventType   String                  @map("event_type")
  candidacy   Candidacy               @relation(fields: [candidacyId], references: [id])
  details     Json?
  createdAt   DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?               @map("updated_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@map("candidacy_log")
}

enum AAPLogUserProfile {
  ADMIN
  AAP
}

model AAPLog {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userKeycloakId  String            @map("user_keycloak_id") @db.Uuid
  userEmail       String            @map("user_email") @db.VarChar(255)
  userProfile     AAPLogUserProfile @map("user_profile")
  maisonMereAAPId String            @map("maison_mere_aap_id") @db.Uuid
  maisonMere      MaisonMereAAP     @relation(fields: [maisonMereAAPId], references: [id])
  eventType       String            @map("event_type")
  details         Json?
  createdAt       DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?         @map("updated_at") @db.Timestamptz(6)

  @@index([maisonMereAAPId])
  @@map("aap_log")
}

enum CompetenceBlocsPartCompletionEnum {
  TO_COMPLETE
  COMPLETED
  IN_PROGRESS
}

enum DFFDecision {
  FAVORABLE
  UNFAVORABLE
}

enum DFFEligibilityRequirement {
  FULL_ELIGIBILITY_REQUIREMENT
  PARTIAL_ELIGIBILITY_REQUIREMENT
}

model DematerializedFeasibilityFile {
  id                                String                              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  firstForeignLanguage              String?                             @map("first_foreign_language")
  secondForeignLanguage             String?                             @map("second_foreign_language")
  option                            String?                             @map("option")
  dffCertificationCompetenceBlocs   DFFCertificationCompetenceBloc[]
  certificationPartComplete         Boolean                             @default(false) @map("certification_part_complete")
  prerequisitesPartComplete         Boolean                             @default(false) @map("prerequisites_part_complete")
  attachmentsPartComplete           Boolean                             @default(false) @map("attachments_part_complete")
  prerequisites                     DFFPrerequisite[]
  competenceBlocsPartCompletion     CompetenceBlocsPartCompletionEnum   @default(TO_COMPLETE) @map("competence_blocs_part_completion")
  aapDecision                       DFFDecision?                        @map("aap_decision")
  aapDecisionComment                String?                             @map("aap_decision_comment")
  candidateDecisionComment          String?                             @map("candidate_decision_comment")
  attachments                       DFFAttachment[]
  dffCertificationCompetenceDetails DFFCertificationCompetenceDetails[]
  sentToCandidateAt                 DateTime?                           @map("sent_to_candidate_at") @db.Timestamptz(6)
  swornStatementFileId              String?                             @unique @map("sworn_statement_file_id") @db.Uuid
  swornStatementFile                File?                               @relation("sworn_statement_file", fields: [swornStatementFileId], references: [id])
  feasibility                       Feasibility                         @relation(fields: [feasibilityId], references: [id], onDelete: Cascade)
  feasibilityId                     String                              @unique @map("feasibility_id") @db.Uuid
  candidateConfirmationAt           DateTime?                           @map("candidate_confirmation_at") @db.Timestamptz(6)
  eligibilityRequirement            DFFEligibilityRequirement?          @map("eligibility_requirement")
  eligibilityValidUntil             DateTime?                           @map("eligibility_valid_until") @db.Timestamptz(6)

  @@map("dematerialized_feasibility_file")
}

model DFFAttachment {
  id                              String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fileId                          String                        @unique @map("file_id") @db.Uuid
  file                            File                          @relation("dff_attachment", fields: [fileId], references: [id])
  type                            DFFAttachmentType
  createdAt                       DateTime                      @default(now()) @map("created_at") @db.Timestamptz(6)
  dematerializedFeasibilityFile   DematerializedFeasibilityFile @relation(fields: [dematerializedFeasibilityFileId], references: [id])
  dematerializedFeasibilityFileId String                        @map("dematerialized_feasibility_file_id") @db.Uuid

  @@map("dff_attachment")
}

enum DFFAttachmentType {
  ID_CARD
  EQUIVALENCE_OR_EXEMPTION_PROOF
  TRAINING_CERTIFICATE
  ADDITIONAL
}

model DFFCertificationCompetenceBloc {
  id                              String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dematerializedFeasibilityFile   DematerializedFeasibilityFile @relation(fields: [dematerializedFeasibilityFileId], references: [id])
  dematerializedFeasibilityFileId String                        @map("dematerialized_feasibility_file_id") @db.Uuid
  certificationCompetenceBlocId   String                        @map("certification_competence_bloc_id") @db.Uuid
  certificationCompetenceBloc     CertificationCompetenceBloc   @relation(fields: [certificationCompetenceBlocId], references: [id])
  text                            String?
  createdAt                       DateTime                      @default(now()) @map("created_at") @db.Timestamptz(6)
  complete                        Boolean                       @default(false)

  @@unique([dematerializedFeasibilityFileId, certificationCompetenceBlocId])
  @@map("dff_certification_competence_bloc")
}

enum DFFCertificationCompetenceDetailsState {
  YES
  NO
  PARTIALLY
}

model DFFCertificationCompetenceDetails {
  id                              String                                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  dematerializedFeasibilityFile   DematerializedFeasibilityFile          @relation(fields: [dematerializedFeasibilityFileId], references: [id])
  dematerializedFeasibilityFileId String                                 @map("dematerialized_feasibility_file_id") @db.Uuid
  certificationCompetenceId       String                                 @map("certification_competence_id") @db.Uuid
  certificationCompetence         CertificationCompetence                @relation(fields: [certificationCompetenceId], references: [id])
  createdAt                       DateTime                               @default(now()) @map("created_at") @db.Timestamptz(6)
  state                           DFFCertificationCompetenceDetailsState @default(YES)

  @@map("dff_certification_competence_details")
}

enum PrerequisiteState {
  ACQUIRED
  IN_PROGRESS
  RECOMMENDED
}

model CertificationPrerequisite {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label           String        @db.Text
  index           Int           @db.Integer
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId String        @map("certification_id") @db.Uuid

  @@map("certification_prerequisite")
}

model DFFPrerequisite {
  id                              String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                           String                         @db.Text
  state                           PrerequisiteState
  DematerializedFeasibilityFile   DematerializedFeasibilityFile? @relation(fields: [dematerializedFeasibilityFileId], references: [id])
  dematerializedFeasibilityFileId String?                        @db.Uuid

  @@map("dff_prerequisite")
}

model MaisonMereAAPLegalInformationDocuments {
  id                                    String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  maisonMereAAP                         MaisonMereAAP @relation(fields: [maisonMereAAPId], references: [id])
  maisonMereAAPId                       String        @unique @map("maison_mere_aap_id") @db.Uuid
  managerFirstname                      String        @map("manager_firstname")
  managerLastname                       String        @map("manager_lastname")
  delegataire                           Boolean       @map("delegataire")
  attestationURSSAFFileId               String        @map("attestation_urssaf_file_id") @db.Uuid
  attestationURSSAFFile                 File          @relation("mmaap_attestation_urssaf_file", fields: [attestationURSSAFFileId], references: [id])
  justificatifIdentiteDirigeantFileId   String        @map("justificatif_identite_dirigeant_file_id") @db.Uuid
  justificatifIdentiteDirigeantFile     File          @relation("mmaap_justificatif_identite_dirigeant_file", fields: [justificatifIdentiteDirigeantFileId], references: [id], map: "mmaap_justificatif_identite_dirigeant_file")
  lettreDeDelegationFileId              String?       @map("lettre_de_delegation_file_id") @db.Uuid
  lettreDeDelegationFile                File?         @relation("mmaap_lettre_de_delegation_file", fields: [lettreDeDelegationFileId], references: [id])
  justificatifIdentiteDelegataireFileId String?       @map("justificatif_identite_delegataire_file_id") @db.Uuid
  justificatifIdentiteDelegataireFile   File?         @relation("mmaap_justificatif_identite_delegataire_file", fields: [justificatifIdentiteDelegataireFileId], references: [id], map: "mmaap_justificatif_identite_delegataire_file")
  createdAt                             DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("maison_mere_aap_legal_information_documents")
}

enum MaisonMereAAPLegalInformationDocumentsDecisionEnum {
  VALIDE
  DEMANDE_DE_PRECISION
}

model MaisonMereAAPLegalInformationDocumentsDecision {
  id                    String                                             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  maisonMereAAP         MaisonMereAAP                                      @relation(fields: [maisonMereAAPId], references: [id])
  maisonMereAAPId       String                                             @map("maison_mere_aap_id") @db.Uuid
  decision              MaisonMereAAPLegalInformationDocumentsDecisionEnum
  internalComment       String                                             @map("internal_comment")
  aapComment            String                                             @map("aap_comment")
  aapUpdatedDocumentsAt DateTime                                           @map("aap_updated_documents_at") @db.Timestamptz(6)
  decisionTakenAt       DateTime                                           @default(now()) @map("decision_taken_at") @db.Timestamptz(6)
  createdAt             DateTime                                           @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("maison_mere_aap_legal_information_documents_decision")
}

model SubscriptionRequest {
  id                                    String                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  companySiret                          String
  companyLegalStatus                    LegalStatus
  companyName                           String
  managerFirstname                      String
  managerLastname                       String
  accountFirstname                      String
  accountLastname                       String
  accountEmail                          String
  accountPhoneNumber                    String
  companyWebsite                        String
  delegataire                           Boolean
  attestationURSSAFFileId               String?                   @map("attestation_urssaf_file_id") @db.Uuid
  attestationURSSAFFile                 File?                     @relation("sr_attestation_urssaf_file", fields: [attestationURSSAFFileId], references: [id], map: "sr_attestation_urssaf_file")
  justificatifIdentiteDirigeantFileId   String?                   @map("justificatif_identite_dirigeant_file_id") @db.Uuid
  justificatifIdentiteDirigeantFile     File?                     @relation("sr_justificatif_identite_dirigeant_file", fields: [justificatifIdentiteDirigeantFileId], references: [id], map: "sr_justificatif_identite_dirigeant_file")
  lettreDeDelegationFileId              String?                   @map("lettre_de_delegation_file_id") @db.Uuid
  lettreDeDelegationFile                File?                     @relation("sr_lettre_de_delegation_file", fields: [lettreDeDelegationFileId], references: [id], map: "sr_lettre_de_delegation_file")
  justificatifIdentiteDelegataireFileId String?                   @map("justificatif_identite_delegataire_file_id") @db.Uuid
  justificatifIdentiteDelegataireFile   File?                     @relation("sr_justificatif_identite_delegataire_file", fields: [justificatifIdentiteDelegataireFileId], references: [id], map: "sr_justificatif_identite_delegataire_file")
  status                                SubscriptionRequestStatus @default(PENDING)
  rejectionReason                       String?                   @map("rejection_reason")
  internalComment                       String?                   @map("internal_comment")
  createdAt                             DateTime                  @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("subscription_request")
}

enum FormacodeType {
  DOMAIN
  SUB_DOMAIN
  KEYWORD
}

model Formacode {
  id        String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime?     @map("updated_at") @db.Timestamptz(6)
  type      FormacodeType
  code      String        @unique
  label     String        @db.VarChar(255)

  //
  parentCode String?     @map("parent_code")
  parent     Formacode?  @relation("children", fields: [parentCode], references: [code], onDelete: NoAction, onUpdate: NoAction)
  children   Formacode[] @relation("children")

  certificationOnFormacode CertificationOnFormacode[]
  organismOnFormacode      OrganismOnFormacode[]

  @@map("formacode")
}

model CertificationOnFormacode {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  formacode       Formacode     @relation(fields: [formacodeId], references: [id], onDelete: Cascade)
  formacodeId     String        @map("formacode_id") @db.Uuid
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId String        @map("certification_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamptz(6)
  isMain          Boolean       @default(false) @map("is_main")

  @@unique([formacodeId, certificationId])
  @@map("certification_on_formacode")
}

model OrganismOnFormacode {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  formacode   Formacode @relation(fields: [formacodeId], references: [id], onDelete: Cascade)
  formacodeId String    @map("formacode_id") @db.Uuid
  organism    Organism  @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId  String    @map("organism_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)

  @@unique([formacodeId, organismId])
  @@map("organism_on_formacode")
}

model CandidacyFinancingMethod {
  id                                  String                                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                               String                                @unique @db.VarChar(255)
  aapDescription                      String?                               @map("aap_description") @db.VarChar(255) // Additional description for AAP in the admin app
  order                               Int
  createdAt                           DateTime                              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                           DateTime?                             @map("updated_at") @db.Timestamptz(6)
  CandidacyOnCandidacyFinancingMethod CandidacyOnCandidacyFinancingMethod[]

  @@map("candidacy_financing_method")
}

model CandidacyOnCandidacyFinancingMethod {
  id                         String                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacyId                String                   @map("candidacy_id") @db.Uuid
  candidacy                  Candidacy                @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyFinancingMethodId String                   @map("candidacy_financing_method") @db.Uuid
  candidacyFinancingMethod   CandidacyFinancingMethod @relation(fields: [candidacyFinancingMethodId], references: [id], onDelete: Cascade)
  additionalInformation      String?                  @map("additional_information")
  amount                     Decimal                  @default(0) @map("amount") @db.Decimal(10, 2)
  createdAt                  DateTime                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime?                @map("updated_at") @db.Timestamptz(6)

  @@unique([candidacyId, candidacyFinancingMethodId])
  @@map("candidacy_on_candidacy_financing_method")
}

model CandidacyContestationCaducite {
  id                                         String                                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacyId                                String                                     @map("candidacy_id") @db.Uuid
  candidacy                                  Candidacy                                  @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  contestationReason                         String                                     @map("contestation_reason")
  certificationAuthorityContestationDecision CertificationAuthorityContestationDecision @default(DECISION_PENDING) @map("certification_authority_contestation_decision")
  contestationSentAt                         DateTime                                   @default(now()) @map("contestation_sent_at") @db.Timestamptz(6)
  updatedAt                                  DateTime?                                  @map("updated_at") @db.Timestamptz(6)

  @@index([candidacyId])
  @@map("candidacy_contestation_caducite")
}

enum CertificationAuthorityContestationDecision {
  DECISION_PENDING
  CADUCITE_INVALIDATED // When contestation is accepted - "invalidation de la caducité"
  CADUCITE_CONFIRMED // When contestation is rejected - "confirmation de la caducité"
}

enum CandidacyEmailType {
  CANDIDACY_IS_CADUQUE_SOON_WARNING_TO_AAP
  CANDIDACY_IS_CADUQUE_SOON_WARNING_TO_CANDIDATE
  CANDIDACY_IS_CADUQUE_NOTICE_TO_AAP
}

model CandidacyEmail {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacyId String             @map("candidacy_id") @db.Uuid
  candidacy   Candidacy          @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  emailType   CandidacyEmailType @map("email_type")
  sentAt      DateTime           @default(now()) @map("sent_at") @db.Timestamptz(6)

  @@map("candidacy_email")
}

model CommanditaireVaeCollective {
  id                  String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  raisonSociale       String                @map("raison_sociale") @db.VarChar(255)
  createdAt           DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime?             @map("updated_at") @db.Timestamptz(6)
  projetVaeCollective ProjetVaeCollective[]

  @@map("commanditaire_vae_collective")
}

model ProjetVaeCollective {
  id                           String                     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nom                          String                     @db.VarChar(255)
  createdAt                    DateTime                   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime?                  @map("updated_at") @db.Timestamptz(6)
  commanditaireVaeCollectiveId String                     @map("commanditaire_vae_collective_id") @db.Uuid
  commanditaireVaeCollective   CommanditaireVaeCollective @relation(fields: [commanditaireVaeCollectiveId], references: [id])
  cohorteVaeCollective         CohorteVaeCollective[]

  @@map("projet_vae_collective")
}

model CohorteVaeCollective {
  id                                 String                              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  nom                                String                              @map("nom") @db.VarChar(255)
  projetVaeCollectiveId              String                              @map("projet_vae_collective_id") @db.Uuid
  projetVaeCollective                ProjetVaeCollective                 @relation(fields: [projetVaeCollectiveId], references: [id])
  createdAt                          DateTime                            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                          DateTime?                           @map("updated_at") @db.Timestamptz(6)
  certificationCohorteVaeCollectives CertificationCohorteVaeCollective[]
  codeInscription                    String                              @unique @map("code_inscription") @db.VarChar(15)
  candidacy                          Candidacy[]

  @@map("cohorte_vae_collective")
}

model CertificationCohorteVaeCollective {
  id                                                        String                                                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt                                                 DateTime                                                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                                 DateTime?                                                   @map("updated_at") @db.Timestamptz(6)
  cohorteVaeCollectiveId                                    String                                                      @map("cohorte_vae_collective_id") @db.Uuid
  cohorteVaeCollective                                      CohorteVaeCollective                                        @relation(fields: [cohorteVaeCollectiveId], references: [id])
  certificationId                                           String                                                      @map("certification_id") @db.Uuid
  certification                                             Certification                                               @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationCohorteVaeCollectiveOnOrganisms              CertificationCohorteVaeCollectiveOnOrganism[]
  certificationCohorteVaeCollectiveOnCertificationAuthority CertificationCohorteVaeCollectiveOnCertificationAuthority[]

  @@map("certification_vae_collective")
}

model CertificationCohorteVaeCollectiveOnOrganism {
  id                                  String                            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationCohorteVaeCollectiveId String                            @map("certification_cohorte_vae_collective_id") @db.Uuid
  certificationCohorteVaeCollective   CertificationCohorteVaeCollective @relation(fields: [certificationCohorteVaeCollectiveId], references: [id], map: "ccvco_certification_cohorte")
  organismId                          String                            @map("organism_id") @db.Uuid
  organism                            Organism                          @relation(fields: [organismId], references: [id], map: "ccvco_organism")

  @@map("certification_vae_collective_on_organism")
}

model CertificationCohorteVaeCollectiveOnCertificationAuthority {
  id                                                                                            String                                                                                          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationCohorteVaeCollectiveId                                                           String                                                                                          @map("certification_cohorte_vae_collective_id") @db.Uuid
  certificationCohorteVaeCollective                                                             CertificationCohorteVaeCollective                                                               @relation(fields: [certificationCohorteVaeCollectiveId], references: [id], map: "ccvco_certification_cohorte")
  certificationAuthorityId                                                                      String                                                                                          @map("certification_authority_id") @db.Uuid
  certificationAuthority                                                                        CertificationAuthority                                                                          @relation(fields: [certificationAuthorityId], references: [id], map: "ccvco_certification_authority")
  certificationCohorteVaeCollectiveOnCertificationAuthorityOnCertificationAuthorityLocalAccount CertificationCohorteVaeCollectiveOnCertificationAuthorityOnCertificationAuthorityLocalAccount[]

  @@map("certification_vae_collective_on_certification_authority")
}

model CertificationCohorteVaeCollectiveOnCertificationAuthorityOnCertificationAuthorityLocalAccount {
  id                                                          String                                                    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  certificationCohorteVaeCollectiveOnCertificationAuthorityId String                                                    @map("certification_cohorte_vae_collective_certification_authority_id") @db.Uuid
  certificationCohorteVaeCollectiveOnCertificationAuthority   CertificationCohorteVaeCollectiveOnCertificationAuthority @relation(fields: [certificationCohorteVaeCollectiveOnCertificationAuthorityId], references: [id], map: "ccvco_certification_authority")
  certificationAuthorityLocalAccountId                        String                                                    @map("certification_authority_local_account_id") @db.Uuid
  certificationAuthorityLocalAccount                          CertificationAuthorityLocalAccount                        @relation(fields: [certificationAuthorityLocalAccountId], references: [id], map: "ccvco_certification_authority_local_account")

  @@map("certification_vae_collective_on_certification_authority_la")
}
