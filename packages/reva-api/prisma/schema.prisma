generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CertificationStatus {
  INACTIVE
  SOON
  AVAILABLE
}

enum ExperienceDuration {
  unknown
  lessThanOneYear
  betweenOneAndThreeYears
  moreThanThreeYears
  moreThanFiveYears
  moreThanTenYears
}

model Certification {
  id          String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  label       String    @db.VarChar(255)
  acronym     String    @db.VarChar(255)
  level       Int       
  activities  String?
  activityArea      String? @map("activity_area")
  accessibleJobType String? @map("accessible_job_type")
  abilities   String?
  slug        String
  summary String?
  status      CertificationStatus @default(INACTIVE)
  rncpId      String    @unique @map("rncp_id") @db.VarChar(255)
  romes       RomesOnCertifications[]
  candidacies Candidacy[]
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")

  @@map("certification")
}

model Profession {
  id          String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  label       String    @db.VarChar(255)
  slug        String
  description String?
  romeId      String    @db.Uuid @map("rome_id")
  rome Rome? @relation(fields: [romeId], references: [id])

  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")

  @@map("profession")
}

model Rome {
  id          String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  code        String    @unique @db.VarChar(255)
  label       String    @db.VarChar(255)
  slug        String    @db.VarChar(255)
  url         String    @db.VarChar(255)
  profession  Profession[]
  certifications RomesOnCertifications[]
  isActive    Boolean   @default(false) @map("is_active")
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")

  @@map("rome")
}


model RomesOnCertifications {
  certification       Certification @relation(fields: [certificationId], references: [id])
  certificationId     String        @db.Uuid  @map("certification_id")
  rome                Rome          @relation(fields: [romeId], references: [id])
  romeId              String        @db.Uuid  @map("rome_id")
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")

  @@id([certificationId, romeId])
  @@map("rome_certification")
}

model Companion {
  id          String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  name        String    @unique @db.VarChar(255)
  street      String
  city        String
  zipCode     String
  candidacies Candidacy[]
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")
  @@map("companion")
}

// model Candidate {
//   id        String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
//   socialSecurityNumber  String?    @unique @db.VarChar(15)
//   firstname  String?    @db.VarChar(255)
//   lastname  String?    @db.VarChar(255)
//   createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
//   updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")
//   @@map("candidate")
// }

model Candidacy {
  id        String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  deviceId  String    @db.VarChar(255)
  keycloakSub String? @db.Uuid  @map("keycloak_sub") 
  companion       Companion? @relation(fields: [companionId], references: [id])
  companionId     String?        @db.Uuid  @map("companion_id")
  certification       Certification @relation(fields: [certificationId], references: [id])
  certificationId     String        @db.Uuid  @map("certification_id")
  candidacyStatuses CandidaciesStatus[]
  goals CandicadiesOnGoals[]
  experiences Experience[]
  phone   String?  @db.VarChar(255)
  email   String?  @db.VarChar(255)
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")
  @@map("candidacy")
}


/// Candicadies statuses
model CandidaciesStatus {
  id        String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  candidacy       Candidacy @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId     String  @db.Uuid  @map("candidacy_id")
  status          CandidacyStatus @default(PROJET)
  isActive    Boolean   @default(false) @map("is_active")    
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")
  @@map("candidacy_candidacy_status")
}

enum CandidacyStatus {
  ARCHIVE
  PROJET
  VALIDATION
  DOSSIER_PRO
  CERTIFICATION
}

model Goal {
  id        String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  label      String   @unique @db.VarChar(255)
  needsAdditionalInformation Boolean @default(false) @map("needs_additional_information")
  isActive    Boolean   @default(false) @map("is_active")
  candidacies CandicadiesOnGoals[]
  order       Int
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")
  @@map("goal")
}

model CandicadiesOnGoals {
  candidacy       Candidacy @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId     String        @db.Uuid  @map("candidacy_id")
  goal                Goal          @relation(fields: [goalId], references: [id])
  goalId              String        @db.Uuid  @map("goal_id")
  additionalInformation    String?    @map("additional_information")
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")

  @@id([candidacyId, goalId])
  @@map("candidacy_goal")
}

model Experience {
  id        String    @id @db.Uuid @default(dbgenerated("uuid_generate_v4()"))
  title String
  description String
  duration    ExperienceDuration
  startedAt   DateTime
  candidacy       Candidacy @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId     String        @db.Uuid  @map("candidacy_id")
  createdAt   DateTime  @db.Timestamptz(6) @default(now()) @map("created_at")
  updatedAt   DateTime? @db.Timestamptz(6) @map("updated_at")
  @@map("experience")
}


