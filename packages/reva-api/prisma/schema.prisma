generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CertificationStatus {
  INACTIVE
  SOON
  AVAILABLE
}

enum ExperienceDuration {
  unknown
  lessThanOneYear
  betweenOneAndThreeYears
  moreThanThreeYears
  moreThanFiveYears
  moreThanTenYears
}

model Certification {
  id                                                     String                                                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                                  String                                                   @db.VarChar(255)
  acronym                                                String                                                   @db.VarChar(255)
  level                                                  Int
  activities                                             String?
  activityArea                                           String?                                                  @map("activity_area")
  accessibleJobType                                      String?                                                  @map("accessible_job_type")
  abilities                                              String?
  summary                                                String?
  status                                                 CertificationStatus                                      @default(INACTIVE)
  rncpId                                                 String                                                   @map("rncp_id") @db.VarChar(255)
  candidaciesAndRegions                                  CandidaciesOnRegionsAndCertifications[]
  organismsAndRegions                                    OrganismsOnRegionsAndCertifications[]
  createdAt                                              DateTime                                                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                              DateTime?                                                @map("updated_at") @db.Timestamptz(6)
  availableCertificationsByDepartments                   AvailableCertificationsByDepartments[]
  activeOrganismsByAvailableCertificationsAndDepartments ActiveOrganismsByAvailableCertificationsAndDepartments[]
  certificationOnDomaine                                 CertificationOnDomaine[]
  certificationOnConventionCollective                    CertificationOnConventionCollective[]
  typeDiplome                                            TypeDiplome?                                             @relation(fields: [typeDiplomeId], references: [id])
  typeDiplomeId                                          String?                                                  @map("type_diplome_id") @db.Uuid

  @@map("certification")
}

model Candidacy {
  id                        String                                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  deviceId                  String                                  @db.VarChar(255)
  organism                  Organism?                               @relation(fields: [organismId], references: [id])
  organismId                String?                                 @map("organism_id") @db.Uuid
  candidacyStatuses         CandidaciesStatus[]
  goals                     CandicadiesOnGoals[]
  experiences               Experience[]
  certificationsAndRegions  CandidaciesOnRegionsAndCertifications[]
  typology                  CandidateTypology                       @default(NON_SPECIFIE)
  typologyAdditional        String?                                 @map("typology_additional")
  firstAppointmentOccuredAt DateTime?                               @map("first_appointment_occured_at") @db.Timestamptz(6)
  appointmentCount          Int                                     @default(0) @map("appointment_count")
  phone                     String?                                 @db.VarChar(255)
  email                     String?                                 @db.VarChar(255)
  trainings                 TrainingOnCandidacies[]
  basicSkills               BasicSkillOnCandidacies[]
  certificateSkills         String?                                 @map("certificate_skills")
  otherTraining             String?                                 @map("other_training")
  individualHourCount       Int?                                    @map("individual_hour_count")
  collectiveHourCount       Int?                                    @map("collective_hour_count")
  additionalHourCount       Int?                                    @map("additional_hour_count")
  candidate                 Candidate?                              @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  candidateId               String?                                 @map("candidate_id") @db.Uuid
  department                Department?                             @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  departmentId              String?                                 @map("department_id") @db.Uuid
  candidacyDropOut          CandidacyDropOut?                       @relation()
  reorientationReason       ReorientationReason?                    @relation(fields: [reorientationReasonId], references: [id], onDelete: Cascade)
  reorientationReasonId     String?                                 @map("reorientation_reason_id") @db.Uuid
  createdAt                 DateTime                                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime?                               @map("updated_at") @db.Timestamptz(6)
  FundingRequest            FundingRequest[]
  paymentRequest            PaymentRequest?
  isCertificationPartial    Boolean                                 @default(false) @map("is_certification_partial")
  admissibility             Admissibility?
  examInfo                  ExamInfo?

  @@map("candidacy")
}

/// Candicadies statuses
model CandidaciesStatus {
  id          String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy   Candidacy           @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId String              @map("candidacy_id") @db.Uuid
  status      CandidacyStatusStep @default(PROJET)
  isActive    Boolean             @default(false) @map("is_active")
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?           @map("updated_at") @db.Timestamptz(6)

  @@map("candidacy_candidacy_status")
}

enum CandidacyStatusStep {
  ARCHIVE
  PROJET
  VALIDATION
  PRISE_EN_CHARGE
  PARCOURS_ENVOYE
  PARCOURS_CONFIRME
  DEMANDE_FINANCEMENT_ENVOYE
  DEMANDE_PAIEMENT_ENVOYEE
  DOSSIER_PRO
  CERTIFICATION
}

enum Gender {
  man
  undisclosed
  woman
}

model Candidate {
  id                       String                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  keycloakId               String                  @unique @map("keycloak_id") @db.Uuid
  gender                   Gender?
  email                    String                  @unique @db.VarChar(255)
  firstname                String                  @db.VarChar(255)
  firstname2               String?                 @db.VarChar(255)
  firstname3               String?                 @db.VarChar(255)
  lastname                 String                  @db.VarChar(255)
  phone                    String                  @db.VarChar(255)
  departmentId             String                  @map("department_id") @db.Uuid
  department               Department              @relation(fields: [departmentId], references: [id])
  highestDegree            Degree?                 @relation(fields: [highestDegreeId], references: [id])
  highestDegreeId          String?                 @map("highest_degree_id") @db.Uuid
  vulnerabilityIndicator   VulnerabilityIndicator? @relation(fields: [vulnerabilityIndicatorId], references: [id])
  vulnerabilityIndicatorId String?                 @map("vulnerability_indicator_id") @db.Uuid
  candidacies              Candidacy[]
  createdAt                DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                DateTime?               @map("updated_at") @db.Timestamptz(6)

  @@map("candidate")
}

model Goal {
  id                         String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                      String               @unique @db.VarChar(255)
  needsAdditionalInformation Boolean              @default(false) @map("needs_additional_information")
  isActive                   Boolean              @default(false) @map("is_active")
  candidacies                CandicadiesOnGoals[]
  order                      Int
  createdAt                  DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                  DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@map("goal")
}

model CandicadiesOnGoals {
  candidacy             Candidacy @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId           String    @map("candidacy_id") @db.Uuid
  goal                  Goal      @relation(fields: [goalId], references: [id])
  goalId                String    @map("goal_id") @db.Uuid
  additionalInformation String?   @map("additional_information")
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime? @map("updated_at") @db.Timestamptz(6)

  @@id([candidacyId, goalId])
  @@map("candidacy_goal")
}

model Experience {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title       String
  description String
  duration    ExperienceDuration
  startedAt   DateTime
  candidacy   Candidacy          @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId String             @map("candidacy_id") @db.Uuid
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?          @map("updated_at") @db.Timestamptz(6)

  @@map("experience")
}

enum CandidateTypology {
  NON_SPECIFIE
  SALARIE_PRIVE
  SALARIE_PUBLIC_HOSPITALIER
  DEMANDEUR_EMPLOI
  AIDANTS_FAMILIAUX
  AUTRE
}

model Region {
  id                           String                                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                        String                                  @unique @db.VarChar(255)
  code                         String                                  @unique @db.VarChar(3)
  candidaciesAndCertifications CandidaciesOnRegionsAndCertifications[]
  organismsAndCertifications   OrganismsOnRegionsAndCertifications[]
  departments                  Department[]
  createdAt                    DateTime                                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                    DateTime?                               @map("updated_at") @db.Timestamptz(6)

  @@map("region")
}

model Department {
  id                                                     String                                                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                                  String                                                   @unique @db.VarChar(255)
  code                                                   String                                                   @unique @db.VarChar(3)
  region                                                 Region                                                   @relation(fields: [regionId], references: [id])
  regionId                                               String                                                   @map("region_id") @db.Uuid
  candidacies                                            Candidacy[]
  createdAt                                              DateTime                                                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                              DateTime?                                                @map("updated_at") @db.Timestamptz(6)
  Candidate                                              Candidate[]
  availableCertificationsByDepartments                   AvailableCertificationsByDepartments[]
  activeOrganismsByAvailableCertificationsAndDepartments ActiveOrganismsByAvailableCertificationsAndDepartments[]
  OrganismsOnDepartments                                 OrganismsOnDepartments[]
  SubscriptionRequestsOnDepartments                      SubscriptionRequestsOnDepartments[]

  @@map("department")
}

model CandidaciesOnRegionsAndCertifications {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy       Candidacy     @relation(fields: [candidacyId], references: [id], onDelete: Cascade)
  candidacyId     String        @map("candidacy_id") @db.Uuid
  region          Region        @relation(fields: [regionId], references: [id])
  regionId        String        @map("region_id") @db.Uuid
  certification   Certification @relation(fields: [certificationId], references: [id])
  certificationId String        @map("certification_id") @db.Uuid
  isActive        Boolean       @default(false) @map("is_active")
  author          String        @db.VarChar(255)
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamptz(6)

  // @@unique([candidacyId, regionId, certificationId])
  @@map("candidacy_region_certification")
}

model Account {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email      String    @unique @db.VarChar(255)
  firstname  String?   @db.VarChar(255)
  lastname   String?   @db.VarChar(255)
  organism   Organism? @relation(fields: [organismId], references: [id])
  organismId String?   @map("organism_id") @db.Uuid
  keycloakId String    @unique @map("keycloak_id") @db.Uuid

  @@map("account")
}

model Organism {
  id                                                     String                                                   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                                  String                                                   @db.VarChar(255)
  legalStatus                                            LegalStatus                                              @default(NC) @map("legal_status")
  address                                                String
  zip                                                    String                                                   @db.VarChar(5)
  city                                                   String                                                   @db.VarChar(255)
  contactAdministrativeEmail                             String                                                   @unique @map("contact_administrative_email") @db.VarChar(255)
  siret                                                  String
  isActive                                               Boolean                                                  @default(false) @map("is_active")
  candidacies                                            Candidacy[]
  accounts                                               Account[]
  regionsAndCertifications                               OrganismsOnRegionsAndCertifications[]
  departmentsWithOrganismMethods                         OrganismsOnDepartments[]
  createdAt                                              DateTime                                                 @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                                              DateTime?                                                @map("updated_at") @db.Timestamptz(6)
  FundingRequest                                         FundingRequest[]
  typology                                               OrganismTypology                                         @map("typology")
  activeOrganismsByAvailableCertificationsAndDepartments ActiveOrganismsByAvailableCertificationsAndDepartments[]
  organismOnDomaine                                      OrganismOnDomaine[]
  organismOnConventionCollective                         OrganismOnConventionCollective[]
  qualiopiCertificateExpiresAt                           DateTime?                                                @map("qualiopi_certificate_expires_at")

  @@unique([siret, typology])
  @@unique([label, typology])
  @@map("organism")
}

model OrganismsOnRegionsAndCertifications {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organism        Organism      @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId      String        @map("organism_id") @db.Uuid
  region          Region        @relation(fields: [regionId], references: [id])
  regionId        String        @map("region_id") @db.Uuid
  isArchitect     Boolean       @default(false) @map("is_architect")
  isCompanion     Boolean       @default(false) @map("is_companion")
  certification   Certification @relation(fields: [certificationId], references: [id])
  certificationId String        @map("certification_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamptz(6)

  @@unique([organismId, regionId, certificationId])
  @@map("organism_region_certification")
}

model OrganismsOnDepartments {
  id           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  organism     Organism   @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId   String     @map("organism_id") @db.Uuid
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String     @map("department_id") @db.Uuid
  isOnSite     Boolean    @default(false) @map("is_onsite")
  isRemote     Boolean    @default(false) @map("is_remote")
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?  @map("updated_at") @db.Timestamptz(6)

  @@unique([organismId, departmentId])
  @@map("organism_department")
}

model Training {
  id                        String                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                     String                      @unique @db.VarChar(255)
  candidacies               TrainingOnCandidacies[]
  createdAt                 DateTime                    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime?                   @map("updated_at") @db.Timestamptz(6)
  trainingOnFundingRequests TrainingOnFundingRequests[]

  @@map("training")
}

model TrainingOnCandidacies {
  training    Training  @relation(fields: [trainingId], references: [id])
  trainingId  String    @map("training_id") @db.Uuid
  candidacy   Candidacy @relation(fields: [candidacyId], references: [id])
  candidacyId String    @map("candidacy_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)

  @@id([trainingId, candidacyId])
  @@map("training_candidacy")
}

model BasicSkill {
  id                          String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                       String                        @unique @db.VarChar(255)
  candidacies                 BasicSkillOnCandidacies[]
  createdAt                   DateTime                      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                   DateTime?                     @map("updated_at") @db.Timestamptz(6)
  basicSkillOnFundingRequests BasicSkillOnFundingRequests[]

  @@map("basic_skill")
}

model BasicSkillOnCandidacies {
  basicSkill   BasicSkill @relation(fields: [basicSkillId], references: [id])
  basicSkillId String     @map("basic_skill_id") @db.Uuid
  candidacy    Candidacy  @relation(fields: [candidacyId], references: [id])
  candidacyId  String     @map("candidacy_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime?  @map("updated_at") @db.Timestamptz(6)

  @@id([basicSkillId, candidacyId])
  @@map("basic_skill_candidacy")
}

model Degree {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code       String      @unique @db.VarChar(255)
  label      String      @unique @db.VarChar(255)
  longLabel  String      @unique @map("long_label") @db.VarChar(255)
  level      Int
  candidates Candidate[]
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("degree")
}

model VulnerabilityIndicator {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label      String      @unique @db.VarChar(255)
  candidates Candidate[]
  createdAt  DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("vulnerability_indicator")
}

model Feature {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key         String    @unique @db.VarChar(255)
  label       String    @db.VarChar(255)
  description String?
  isActive    Boolean   @default(false) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @map("updated_at") @db.Timestamptz(6)

  @@map("features")
}

model BatchExecution {
  id         String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key        String    @db.VarChar(255)
  startedAt  DateTime  @map("started_at") @db.Timestamptz(6)
  finishedAt DateTime? @map("finished_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamptz(6)

  @@map("batch_execution")
}

model FundingRequest {
  id                          String                        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                   Candidacy                     @relation(fields: [candidacyId], references: [id])
  candidacyId                 String                        @unique @map("candidacy_id") @db.Uuid
  companion                   Organism?                     @relation(fields: [companionId], references: [id], onDelete: Cascade)
  companionId                 String?                       @map("companion_id") @db.Uuid
  diagnosisHourCount          Int                           @map("diagnosis_hour_count")
  diagnosisCost               Decimal                       @map("diagnosis_cost") @db.Decimal(10, 2)
  postExamHourCount           Int                           @map("post_exam_hour_count")
  postExamCost                Decimal                       @map("post_exam_cost") @db.Decimal(10, 2)
  individualHourCount         Int                           @map("individual_hour_count")
  individualCost              Decimal                       @map("individual_cost") @db.Decimal(10, 2)
  collectiveHourCount         Int                           @map("collective_hour_count")
  collectiveCost              Decimal                       @map("collective_cost") @db.Decimal(10, 2)
  basicSkills                 BasicSkillOnFundingRequests[]
  basicSkillsHourCount        Int                           @map("basic_skills_hour_count")
  basicSkillsCost             Decimal                       @map("basic_skills_cost") @db.Decimal(10, 2)
  mandatoryTrainings          TrainingOnFundingRequests[]
  mandatoryTrainingsHourCount Int                           @map("mandatory_training_hour_count")
  mandatoryTrainingsCost      Decimal                       @map("mandatory_training_cost") @db.Decimal(10, 2)
  certificateSkills           String                        @map("certificate_skills")
  certificateSkillsHourCount  Int                           @map("certificate_skills_hour_count")
  certificateSkillsCost       Decimal                       @map("certificate_skills_cost") @db.Decimal(10, 2)
  otherTraining               String                        @map("other_training")
  otherTrainingHourCount      Int                           @default(0) @map("other_training_hour_count")
  otherTrainingCost           Decimal                       @default(0) @map("other_training_cost") @db.Decimal(10, 2)
  examHourCount               Int                           @map("exam_hour_count")
  examCost                    Decimal                       @map("exam_cost") @db.Decimal(10, 2)
  fundingRequestBatch         FundingRequestBatch?
  numAction                   String                        @default("TO_MIGRATE") @map("num_action")

  @@map("funding_request")
}

model BasicSkillOnFundingRequests {
  basicSkill       BasicSkill     @relation(fields: [basicSkillId], references: [id])
  basicSkillId     String         @map("basic_skill_id") @db.Uuid
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String         @map("funding_request_id") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?      @map("updated_at") @db.Timestamptz(6)

  @@id([basicSkillId, fundingRequestId])
  @@map("basic_skill_funding_request")
}

model TrainingOnFundingRequests {
  training         Training       @relation(fields: [trainingId], references: [id])
  trainingId       String         @map("training_id") @db.Uuid
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String         @map("funding_request_id") @db.Uuid
  createdAt        DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime?      @map("updated_at") @db.Timestamptz(6)

  @@id([trainingId, fundingRequestId])
  @@map("training_funding_request")
}

model FundingRequestBatch {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fundingRequest   FundingRequest @relation(fields: [fundingRequestId], references: [id])
  fundingRequestId String         @unique @map("funding_request_id") @db.Uuid
  sent             Boolean        @default(false)
  content          Json

  @@map("funding_request_batch")
}

model DropOutReason {
  id          String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label       String             @unique @db.VarChar(255)
  candidacies CandidacyDropOut[] @relation()
  createdAt   DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?          @map("updated_at") @db.Timestamptz(6)

  @@map("drop_out_reason")
}

model CandidacyDropOut {
  candidacy          Candidacy           @relation(fields: [candidacyId], references: [id])
  candidacyId        String              @unique @map("candidacy_id") @db.Uuid
  dropOutReason      DropOutReason       @relation(fields: [dropOutReasonId], references: [id])
  dropOutReasonId    String              @map("drop_out_reason_id") @db.Uuid
  status             CandidacyStatusStep
  droppedOutAt       DateTime            @map("dropped_out_at")
  otherReasonContent String?             @map("other_reason_content")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime?           @map("updated_at") @db.Timestamptz(6)

  @@id([candidacyId])
  @@map("candidacy_drop_out")
}

model ReorientationReason {
  id          String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label       String      @unique @db.VarChar(255)
  candidacies Candidacy[] @relation()
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("reorientation_reason")
}

enum AdmissibilityStatus {
  ADMISSIBLE
  NOT_ADMISSIBLE
}

model Admissibility {
  id                             String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                      Candidacy            @relation(fields: [candidacyId], references: [id])
  candidacyId                    String               @unique @map("candidacy_id") @db.Uuid
  isCandidateAlreadyAdmissible   Boolean              @default(false) @map("is_candidate_already_admissible")
  reportSentAt                   DateTime?            @map("report_sent_at")
  certifierRespondedAt           DateTime?            @map("certifier_responded_at")
  responseAvailableToCandidateAt DateTime?            @map("response_available_to_candidate_at")
  status                         AdmissibilityStatus? @map("status")
  createdAt                      DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                      DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@map("admissibility")
}

model PaymentRequest {
  id                                   String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy                            Candidacy            @relation(fields: [candidacyId], references: [id])
  candidacyId                          String               @unique @map("candidacy_id") @db.Uuid
  diagnosisEffectiveHourCount          Int                  @map("diagnosis_effective_hour_count")
  diagnosisEffectiveCost               Decimal              @map("diagnosis_effective_cost") @db.Decimal(10, 2)
  postExamEffectiveHourCount           Int                  @map("post_exam_effective_hour_count")
  postExamEffectiveCost                Decimal              @map("post_exam_effective_cost") @db.Decimal(10, 2)
  individualEffectiveHourCount         Int                  @map("individual_effective_hour_count")
  individualEffectiveCost              Decimal              @map("individual_effective_cost") @db.Decimal(10, 2)
  collectiveEffectiveHourCount         Int                  @map("collective_effective_hour_count")
  collectiveEffectiveCost              Decimal              @map("collective_effective_cost") @db.Decimal(10, 2)
  mandatoryTrainingsEffectiveHourCount Int                  @map("mandatory_training_effective_hour_count")
  mandatoryTrainingsEffectiveCost      Decimal              @map("mandatory_training_effective_cost") @db.Decimal(10, 2)
  basicSkillsEffectiveHourCount        Int                  @map("basic_skills_effective_hour_count")
  basicSkillsEffectiveCost             Decimal              @map("basic_skills_effective_cost") @db.Decimal(10, 2)
  certificateSkillsEffectiveHourCount  Int                  @map("certificate_skills_effective_hour_count")
  certificateSkillsEffectiveCost       Decimal              @map("certificate_skills_effective_cost") @db.Decimal(10, 2)
  examEffectiveHourCount               Int                  @map("exam_effective_hour_count")
  examEffectiveCost                    Decimal              @map("exam_effective_cost") @db.Decimal(10, 2)
  otherTrainingEffectiveHourCount      Int                  @default(0) @map("other_training_effective_hour_count")
  otherTrainingEffectiveCost           Decimal              @default(0) @map("other_training_effective_cost") @db.Decimal(10, 2)
  invoiceNumber                        String               @map("invoice_number")
  PaymentRequestBatch                  PaymentRequestBatch?

  @@map("payment_request")
}

model PaymentRequestBatch {
  id               String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  paymentRequest   PaymentRequest @relation(fields: [paymentRequestId], references: [id])
  paymentRequestId String         @unique @map("payment_request_id") @db.Uuid
  sent             Boolean        @default(false)
  content          Json

  @@map("payment_request_batch")
}

model FileUploadSpooler {
  id                  String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  destinationFileName String   @map("destination_file_name") @db.VarChar(255)
  destinationPath     String   @map("destination_path") @db.VarChar(255)
  description         String   @map("description") @db.VarChar(255)
  fileContent         Bytes    @map("file_content")

  @@map("file_upload_spooler")
}

enum LegalStatus {
  EI
  EURL
  SARL
  SAS
  SASU
  SA
  EIRL
  ASSOCIATION_LOI_1901
  ETABLISSEMENT_PUBLIC
  NC
}

model SubscriptionRequest {
  id                                        String                                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  companyName                               String                                      @map("company_name") @db.VarChar(255)
  companyLegalStatus                        LegalStatus                                 @map("company_legal_status")
  companySiret                              String                                      @map("company_siret") @db.VarChar(255)
  companyAddress                            String                                      @default("") @map("company_address") @db.VarChar(255)
  companyZipCode                            String                                      @default("") @map("company_zipcode") @db.VarChar(5)
  companyCity                               String                                      @default("") @map("company_city") @db.VarChar(100)
  accountFirstname                          String                                      @map("account_firstname") @db.VarChar(100)
  accountLastname                           String                                      @map("account_lastname") @db.VarChar(100)
  accountEmail                              String                                      @map("account_email") @db.VarChar(255)
  accountPhoneNumber                        String                                      @map("account_phone_number") @db.VarChar(50)
  typology                                  OrganismTypology                            @map("typology")
  createdAt                                 DateTime                                    @default(now()) @map("created_at") @db.Timestamptz(6)
  subscriptionRequestOnDomaine              SubscriptionRequestOnDomaine[]
  subscriptionRequestOnConventionCollective SubscriptionRequestOnConventionCollective[]
  departmentsWithOrganismMethods            SubscriptionRequestsOnDepartments[]
  companyWebsite                            String?                                     @map("company_website") @db.VarChar(255)
  qualiopiCertificateExpiresAt              DateTime                                    @map("qualiopi_certificate_expires_at")

  @@map("subscription_request")
}

model SubscriptionRequestsOnDepartments {
  id                    String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  department            Department          @relation(fields: [departmentId], references: [id])
  departmentId          String              @map("department_id") @db.Uuid
  isOnSite              Boolean             @default(false) @map("is_onsite")
  isRemote              Boolean             @default(false) @map("is_remote")
  subscriptionRequestId String              @map("subscription_request_id") @db.Uuid
  SubscriptionRequest   SubscriptionRequest @relation(fields: [subscriptionRequestId], references: [id], onDelete: Cascade)

  @@map("subscription_request_department")
}

enum OrganismTypology {
  experimentation
  generaliste
  expertFiliere
  expertBranche
  expertBrancheEtFiliere
}

view AvailableCertificationsByDepartments {
  certification   Certification @relation(fields: [certificationId], references: [id])
  department      Department    @relation(fields: [departmentId], references: [id])
  certificationId String        @map("certification_id") @db.Uuid
  departmentId    String        @map("department_id") @db.Uuid

  @@unique([certificationId, departmentId])
  @@map("available_certification_by_department")
}

view ActiveOrganismsByAvailableCertificationsAndDepartments {
  organism        Organism      @relation(fields: [organismId], references: [id], onDelete: Cascade)
  certification   Certification @relation(fields: [certificationId], references: [id])
  department      Department    @relation(fields: [departmentId], references: [id])
  organismId      String        @map("organism_id") @db.Uuid
  certificationId String        @map("certification_id") @db.Uuid
  departmentId    String        @map("department_id") @db.Uuid

  @@unique([organismId, certificationId, departmentId])
  @@map("active_organism_by_available_certification_and_department")
}

model Domaine {
  id                           String                         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                        String                         @db.VarChar(255)
  code                         String                         @unique @db.VarChar(3)
  subscriptionRequestOnDomaine SubscriptionRequestOnDomaine[]
  organismOnDomaine            OrganismOnDomaine[]
  certificationOnDomaine       CertificationOnDomaine[]

  @@map("domaine")
}

model SubscriptionRequestOnDomaine {
  domaine               Domaine             @relation(fields: [domaineId], references: [id])
  domaineId             String              @map("domaine_id") @db.Uuid
  subscriptionRequest   SubscriptionRequest @relation(fields: [subscriptionRequestId], references: [id], onDelete: Cascade)
  subscriptionRequestId String              @map("subscription_request_id") @db.Uuid
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?           @map("updated_at") @db.Timestamptz(6)

  @@id([domaineId, subscriptionRequestId])
  @@map("subscription_request_on_domaine")
}

model OrganismOnDomaine {
  domaine    Domaine   @relation(fields: [domaineId], references: [id])
  domaineId  String    @map("domaine_id") @db.Uuid
  organism   Organism  @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId String    @map("organism_id") @db.Uuid
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @map("updated_at") @db.Timestamptz(6)

  @@id([domaineId, organismId])
  @@map("organism_on_domaine")
}

model CertificationOnDomaine {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  domaine         Domaine       @relation(fields: [domaineId], references: [id])
  domaineId       String        @map("domaine_id") @db.Uuid
  certification   Certification @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId String        @map("certification_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?     @map("updated_at") @db.Timestamptz(6)

  @@unique([domaineId, certificationId])
  @@map("certification_on_domaine")
}

model ConventionCollective {
  id                                        String                                      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label                                     String                                      @db.VarChar(255)
  code                                      String                                      @unique @map("ccid") @db.VarChar(10)
  subscriptionRequestOnConventionCollective SubscriptionRequestOnConventionCollective[]
  organismOnConventionCollective            OrganismOnConventionCollective[]
  certificationOnConventionCollective       CertificationOnConventionCollective[]

  @@map("convention_collective")
}

model OrganismOnConventionCollective {
  ccn        ConventionCollective @relation(fields: [ccnId], references: [id])
  ccnId      String               @map("ccn_id") @db.Uuid
  organism   Organism             @relation(fields: [organismId], references: [id], onDelete: Cascade)
  organismId String               @map("organism_id") @db.Uuid
  createdAt  DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@id([ccnId, organismId])
  @@map("organism_on_ccn")
}

model CertificationOnConventionCollective {
  id              String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ccn             ConventionCollective @relation(fields: [ccnId], references: [id])
  ccnId           String               @map("ccn_id") @db.Uuid
  certification   Certification        @relation(fields: [certificationId], references: [id], onDelete: Cascade)
  certificationId String               @map("certification_id") @db.Uuid
  createdAt       DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@unique([ccnId, certificationId])
  @@map("certification_on_ccn")
}

model SubscriptionRequestOnConventionCollective {
  ccn                   ConventionCollective @relation(fields: [ccnId], references: [id])
  ccnId                 String               @map("ccn_id") @db.Uuid
  subscriptionRequest   SubscriptionRequest  @relation(fields: [subscriptionRequestId], references: [id], onDelete: Cascade)
  subscriptionRequestId String               @map("subscription_request_id") @db.Uuid
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime?            @map("updated_at") @db.Timestamptz(6)

  @@id([ccnId, subscriptionRequestId])
  @@map("subscription_request_on_ccn")
}

enum ExamResult {
  SUCCESS
  PARTIAL_SUCCESS
  PARTIAL_CERTIFICATION_SUCCESS
  FAILURE
}

model ExamInfo {
  id                String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidacy         Candidacy   @relation(fields: [candidacyId], references: [id])
  candidacyId       String      @unique @map("candidacy_id") @db.Uuid
  examResult        ExamResult? @map("exam_result")
  estimatedExamDate DateTime?   @map("estimated_exam_date")
  actualExamDate    DateTime?   @map("actual_exam_date")
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime?   @map("updated_at") @db.Timestamptz(6)

  @@map("exam_info")
}

model TypeDiplome {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  label         String          @db.VarChar(200)
  Certification Certification[]

  @@map("type_diplome")
}
