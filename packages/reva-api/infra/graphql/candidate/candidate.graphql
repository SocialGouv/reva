enum Gender {
  man
  undisclosed
  woman
}

type Tokens {
  accessToken: String!
  refreshToken: String!
  idToken: String!
}

type CandidateLogged {
  tokens: Tokens!
  candidate: Candidate!
}

type FundingRequestInformations {
  training: TrainingForm!
  fundingRequest: FundingRequest
}

type TrainingForm {
  individualHourCount: Int!
  certificateSkills: String!
  collectiveHourCount: Int!
  basicSkills: [BasicSkill!]!
  mandatoryTrainings: [Training!]!
  otherTraining: String!
}

type FundingRequest {
  id: UUID!
  companion: Organism!

  diagnosisHourCount: Int!
  diagnosisCost: Int!

  postExamHourCount: Int!
  postExamCost: Int!

  individualHourCount: Int!
  individualCost: Int!

  collectiveHourCount: Int!
  collectiveCost: Int!

  basicSkills: [BasicSkill!]!
  basicSkillsHourCount: Int!
  basicSkillsCost: Int!

  mandatoryTrainings: [Training!]!
  mandatoryTrainingsHourCount: Int!
  mandatoryTrainingsCost: Int!

  certificateSkills: String!
  certificateSkillsHourCount: Int!
  certificateSkillsCost: Int!

  otherTraining: String!
  otherTrainingHourCount: Int!

  examHourCount: Int!
  examCost: Int!
}

type Candidate {
  id: UUID!
  gender: Gender
  firstname: String!
  firstname2: String
  firstname3: String
  lastname: String!
  email: String!
  phone: String!
  candidacy: Candidacy!
  highestDegree: Degree
  vulnerabilityIndicator: VulnerabilityIndicator
}

type Query {
  candidate_getCandidateWithCandidacy: Candidate!
  candidate_getCandidateByEmail(email: String!): Candidate
  candidate_getFundingRequest(candidacyId: UUID!): FundingRequestInformations!
}

input CandidateInput {
  email: String!
  phone: String!
  firstname: String!
  lastname: String!
}

input FullCandidateInput {
  gender: Gender
  firstname: String
  firstname2: String
  firstname3: String
  lastname: String
  email: String
  phone: String
  highestDegreeId: UUID
  vulnerabilityIndicatorId: UUID
}

input FundingRequestInput {
  companionId: UUID!

  diagnosisHourCount: Int!
  diagnosisCost: Int!

  postExamHourCount: Int!
  postExamCost: Int!

  individualHourCount: Int!
  individualCost: Int!

  collectiveHourCount: Int!
  collectiveCost: Int!

  basicSkillsIds: [UUID!]!
  basicSkillsHourCount: Int!
  basicSkillsCost: Int!

  mandatoryTrainingsIds: [UUID!]!
  mandatoryTrainingsHourCount: Int!
  mandatoryTrainingsCost: Int!

  certificateSkills: String!
  certificateSkillsHourCount: Int!
  certificateSkillsCost: Int!

  otherTraining: String!
  otherTrainingHourCount: Int!

  examHourCount: Int!
  examCost: Int!
}

type Mutation {
  candidate_askForRegistration(candidate: CandidateInput!): String!
  candidate_askForLogin(email: String!): String!
  candidate_login(token: String!): CandidateLogged!
  candidate_createFundingRequest(
    candidacyId: UUID!
    fundingRequest: FundingRequestInput!
  ): FundingRequest!
  candidate_updateCandidate(
    id: UUID!
    candidate: FullCandidateInput!
  ): Candidate!
}
