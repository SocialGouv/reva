extend type Candidacy {
  paymentRequest: PaymentRequest
}

type PaymentRequest {
  id: ID!
  diagnosisEffectiveHourCount: Int!
  diagnosisEffectiveCost: Decimal!
  postExamEffectiveHourCount: Int!
  postExamEffectiveCost: Decimal!
  individualEffectiveHourCount: Int!
  individualEffectiveCost: Decimal!
  collectiveEffectiveHourCount: Int!
  collectiveEffectiveCost: Decimal!
  mandatoryTrainingsEffectiveHourCount: Int!
  mandatoryTrainingsEffectiveCost: Decimal!
  basicSkillsEffectiveHourCount: Int!
  basicSkillsEffectiveCost: Decimal!
  certificateSkillsEffectiveHourCount: Int!
  certificateSkillsEffectiveCost: Decimal!
  otherTrainingEffectiveHourCount: Int!
  otherTrainingEffectiveCost: Decimal!
  examEffectiveHourCount: Int!
  examEffectiveCost: Decimal!
  invoiceNumber: String!
}

type FundingRequest {
  id: UUID!
  numAction: String
  companion: Organism
  diagnosisHourCount: Int!
  diagnosisCost: Decimal!
  postExamHourCount: Int!
  postExamCost: Decimal!
  individualHourCount: Int!
  individualCost: Decimal!
  collectiveHourCount: Int!
  collectiveCost: Decimal!
  basicSkills: [BasicSkill!]!
  basicSkillsHourCount: Int!
  basicSkillsCost: Decimal!
  mandatoryTrainings: [Training!]!
  mandatoryTrainingsHourCount: Int!
  mandatoryTrainingsCost: Decimal!
  certificateSkills: String!
  certificateSkillsHourCount: Int!
  certificateSkillsCost: Decimal!
  otherTraining: String!
  otherTrainingHourCount: Int!
  otherTrainingCost: Decimal!
  examHourCount: Int!
  examCost: Decimal!
}

input PaymentRequestInput {
  diagnosisEffectiveHourCount: Int!
  diagnosisEffectiveCost: Decimal!
  postExamEffectiveHourCount: Int!
  postExamEffectiveCost: Decimal!
  individualEffectiveHourCount: Int!
  individualEffectiveCost: Decimal!
  collectiveEffectiveHourCount: Int!
  collectiveEffectiveCost: Decimal!
  mandatoryTrainingsEffectiveHourCount: Int!
  mandatoryTrainingsEffectiveCost: Decimal!
  basicSkillsEffectiveHourCount: Int!
  basicSkillsEffectiveCost: Decimal!
  certificateSkillsEffectiveHourCount: Int!
  certificateSkillsEffectiveCost: Decimal!
  otherTrainingEffectiveHourCount: Int!
  otherTrainingEffectiveCost: Decimal!
  examEffectiveHourCount: Int!
  examEffectiveCost: Decimal!
  invoiceNumber: String!
}

input FundingRequestInput {
  companionId: UUID
  diagnosisHourCount: Int!
  diagnosisCost: Decimal!
  postExamHourCount: Int!
  postExamCost: Decimal!
  individualHourCount: Int!
  individualCost: Decimal!
  collectiveHourCount: Int!
  collectiveCost: Decimal!
  basicSkillsIds: [UUID!]!
  basicSkillsHourCount: Int!
  basicSkillsCost: Decimal!
  mandatoryTrainingsIds: [UUID!]!
  mandatoryTrainingsHourCount: Int!
  mandatoryTrainingsCost: Decimal!
  certificateSkills: String!
  certificateSkillsHourCount: Int!
  certificateSkillsCost: Decimal!
  otherTraining: String!
  otherTrainingHourCount: Int!
  otherTrainingCost: Decimal!
  examHourCount: Int!
  examCost: Decimal!
}

type FundingRequestInformations {
  training: TrainingForm!
  fundingRequest: FundingRequest
}

type Query {
  candidate_getFundingRequest(candidacyId: UUID!): FundingRequestInformations!
}

type Mutation {
  candidacy_createOrUpdatePaymentRequest(
    candidacyId: UUID!
    paymentRequest: PaymentRequestInput!
  ): PaymentRequest!
  candidacy_confirmPaymentRequest(candidacyId: UUID!): Candidacy!
  candidate_createFundingRequest(
    candidacyId: UUID!
    fundingRequest: FundingRequestInput!
  ): FundingRequest!
}
