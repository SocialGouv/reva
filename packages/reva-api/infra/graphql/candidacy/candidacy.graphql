enum Duration {
  unknown
  lessThanOneYear
  betweenOneAndThreeYears
  moreThanThreeYears
  moreThanFiveYears
  moreThanTenYears
}

enum CandidateTypology {
  NON_SPECIFIE
  SALARIE_PRIVE
  SALARIE_PUBLIC_HOSPITALIER
  DEMANDEUR_EMPLOI
  AIDANTS_FAMILIAUX
  AUTRE
}

# QUERY

type Candidacy {
  id: ID!
  deviceId: ID!
  certificationId: ID!
  companionId: ID
  certification: Certification!
  experiences: [Experience!]!
  goals: [CandidateGoal!]!
  phone: String
  email: String
  typology: CandidateTypology
  typologyAdditional: String
  firstAppointmentOccuredAt: Date
  appointmentCount: Int
  wasPresentAtFirstAppointment: Boolean
  candidacyStatuses: [CandidacyStatus!]!
  createdAt: Date!
}

type CandidacySummary {
  id: ID!
  deviceId: ID!
  certificationId: ID!
  companionId: ID
  certification: Certification!
  phone: String
  email: String
  lastStatus: CandidacyStatus!
  createdAt: Date!
}

type CandidacyStatus {
  id: ID!
  status: String!
  isActive: Boolean!
  createdAt: Date!
}

type Experience {
  id: ID!
  title: String!
  startedAt: Date!
  duration: Duration!
  description: String!
}

type CandidateGoal {
  goalId: ID!
  additionalInformation: String
}

type Companion {
  id: ID!
  name: String!
  street: String!
  city: String!
  zipCode: String!
}

type Query {
  getCandidacy(deviceId: ID!): Candidacy
  getCandidacyById(id: ID!): Candidacy
  getCandidacies: [CandidacySummary!]!
  getCompanions: [Companion!]!
}

# MUTATIONS

input CandidacyInput {
  deviceId: ID!
  certificationId: ID!
}

input CertificationChangeInput {
  candidacyId: ID!
  certificationId: ID!
}

input ExperienceInput {
  title: String!
  startedAt: Date!
  duration: Duration!
  description: String!
}

input CandidateGoalInput {
  goalId: ID!
  additionalInformation: String
}

input CandidateTypologyInformationsInput {
  typology: CandidateTypology!
  additionalInformation: String
}

input AppointmentInformationsInput {
  firstAppointmentOccuredAt: Date!
  wasPresentAtFirstAppointment: Boolean!
  appointmentCount: Int!
}

type Mutation {
  candidacy_createCandidacy(candidacy: CandidacyInput!): Candidacy
  candidacy_submitCandidacy(deviceId: ID!, candidacyId: ID!): Candidacy
  candidacy_updateCertification(
    deviceId: ID!
    candidacyId: ID!
    certificationId: ID!
  ): Candidacy
  candidacy_addExperience(
    deviceId: ID!
    candidacyId: ID!
    experience: ExperienceInput
  ): Experience
  candidacy_updateExperience(
    deviceId: ID!
    candidacyId: ID!
    experienceId: ID!
    experience: ExperienceInput
  ): Experience
  candidacy_removeExperience(
    deviceId: ID!
    candidacyId: ID!
    experienceId: ID!
  ): Void
  candidacy_updateGoals(
    deviceId: ID!
    candidacyId: ID!
    goals: [CandidateGoalInput!]!
  ): Int!
  candidacy_updateContact(
    deviceId: ID!
    candidacyId: ID!
    email: String
    phone: String
  ): Candidacy
  candidacy_archiveById(candidacyId: ID!): Candidacy!
  candidacy_deleteById(candidacyId: ID!): String!
  candidacy_updateAppointmentInformations(
    candidacyId: ID!
    candidateTypologyInformations: CandidateTypologyInformationsInput!
    appointmentInformations: AppointmentInformationsInput!
  ): Candidacy!
  candidacy_care(candidacyId: ID!): Void
}
